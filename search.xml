<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>流程控制与数组</title>
      <link href="/2018/08/12/java/java%E5%9F%BA%E7%A1%80/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%95%B0%E7%BB%84/"/>
      <url>/2018/08/12/java/java%E5%9F%BA%E7%A1%80/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h1 id="带标签的break和continue"><a href="#带标签的break和continue" class="headerlink" title="带标签的break和continue"></a>带标签的break和continue</h1><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>;t &lt; <span class="number">3</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>;u &lt; <span class="number">2</span>;u++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(t + <span class="string">"!!!!!!"</span> + u);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出：</span></span><br><span class="line"><span class="comment">0!!!!!!0</span></span><br><span class="line"><span class="comment">1!!!!!!0</span></span><br><span class="line"><span class="comment">2!!!!!!0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">outer1:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>;t &lt; <span class="number">3</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>;u &lt; <span class="number">2</span>;u++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(t + <span class="string">"!!!!!!"</span> + u);</span><br><span class="line"><span class="keyword">break</span> outer1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出：</span></span><br><span class="line"><span class="comment">0!!!!!!0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>;t &lt; <span class="number">3</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>;u &lt; <span class="number">3</span>;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (u == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">System.out.println(t + <span class="string">"!!!!!!"</span> + u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出：</span></span><br><span class="line"><span class="comment">0!!!!!!0</span></span><br><span class="line"><span class="comment">0!!!!!!2</span></span><br><span class="line"><span class="comment">1!!!!!!0</span></span><br><span class="line"><span class="comment">1!!!!!!2</span></span><br><span class="line"><span class="comment">2!!!!!!0</span></span><br><span class="line"><span class="comment">2!!!!!!2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">outer2:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>;t &lt; <span class="number">3</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>;u &lt; <span class="number">3</span>;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (u == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span> outer2;</span><br><span class="line">System.out.println(t + <span class="string">"!!!!!!"</span> + u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出：</span></span><br><span class="line"><span class="comment">0!!!!!!0</span></span><br><span class="line"><span class="comment">1!!!!!!0</span></span><br><span class="line"><span class="comment">2!!!!!!0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="基础循环判断语句的注意事项"><a href="#基础循环判断语句的注意事项" class="headerlink" title="基础循环判断语句的注意事项"></a>基础循环判断语句的注意事项</h1><p>使用if…else语句时，应当把包含范围小的条件放在前面处理。</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>盘点java数值运算中的那些骚操作</title>
      <link href="/2018/08/12/java/java%E5%9F%BA%E7%A1%80/%E7%9B%98%E7%82%B9java%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/12/java/java%E5%9F%BA%E7%A1%80/%E7%9B%98%E7%82%B9java%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h1><a id="more"></a><p>java标识符必须由字母、下划线、数字、<strong>美元符($)</strong>组成，其中数字不能做开头。</p><ul><li>字母为Unicode字符集所支持的字符，包括但不限于中文字符、日本字符等。</li><li>特殊字符只能包含美元符，其他字符如@、#等不行。</li><li>严格区分大小写。</li><li>不能含有空格。</li></ul><p>java一共包含50个关键字(至java 8)，均为小写。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180812/0035HHhHD8.jpg?imageslim" alt="mark"></p><p>goto和const为保留字，至今仍未使用(java 8)，但不代表以后不使用。</p><p>三个特殊直接量：true、false、null。</p><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>直接给出一个整数值默认为int类型。</p><ul><li><p>将一个较小的整数值(byte或short类型范围内)赋值给一个byte或short变量，系统自动将其当做byte或short类型处理。</p><p><em>byte占一个字节，short占两个字节。</em></p></li><li><p>将一个超过int类型的整数值赋值给long时，<strong>java不会自动将这个整数值当long类型来处理，必须得在后面加上L或l。</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java 7引入功能：在整型或浮点型数值中可以任意使用下划线分隔</span></span><br><span class="line"><span class="comment">//输入的是补码</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0B1000_0000_0000_0000_0000_0000_0000_0011</span>;</span><br><span class="line">System.out.println(a);<span class="comment">//输出-2147483645 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0B1000_0000_0000_0000_0000_0000_0000_0011L</span>;</span><br><span class="line">System.out.println(b);<span class="comment">//非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> c = <span class="number">0B1000_0000_0000_0000_0000_0000_0000_0011L</span>;</span><br><span class="line">System.out.println(c);<span class="comment">//输出2147483651</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> d = <span class="number">0B1000_0000_0000_0000_0000_0000_0000_0011</span>;</span><br><span class="line">System.out.println(d);<span class="comment">//输出-2147483645</span></span><br></pre></td></tr></table></figure><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>char类型占两个字节。</p><p>三种表示形式：</p><ul><li>直接通过单个字符来表示：’A’、’9’、’0’等。</li><li>通过转义字符表示特殊字符型值：’\n’、’\t’等。</li><li>直接使用Unicode值来表示字符型值：’\uXXXX’，其中XXXX代表一个十六进制整数。</li></ul><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>java浮点型默认为double类型的值，若希望当成float类型处理需要加上f或F。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">5.2388858694f</span>;</span><br><span class="line">System.out.println(a);<span class="comment">//输出5.238886</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> b = <span class="number">5.2388858694</span>;</span><br><span class="line">System.out.println(b);<span class="comment">//非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> c = <span class="number">5.2388858694</span>;</span><br><span class="line">System.out.println(c);<span class="comment">//输出5.2388858694</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">5.2388858694</span>;</span><br><span class="line">System.out.println(d);<span class="comment">//输出5.238885879516602(小数点第六位之后为随机输出)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> q1 = <span class="number">5.6</span>;</span><br><span class="line">System.out.println(q1);<span class="comment">//非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> q2 = <span class="number">5.6f</span>;</span><br><span class="line">System.out.println(q2);<span class="comment">//输出5.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> q3 = <span class="number">5</span>;</span><br><span class="line">System.out.println(q3);<span class="comment">//输出5.0</span></span><br></pre></td></tr></table></figure><p>正无穷大通过Double类或Float类的POSITIVE_INFINITY来表示，负无穷大通过Double类或Float类的NEGATIVE_INFINITY来表示，非数用Double类或Float类的NaN来表示。</p><p><strong>所有正无穷大都相等，所有负无穷大也相等，NaN不与任何数值相等，与其本身也不相等。</strong></p><p><strong>只有浮点数除以0才能得到正负无穷大，如果整数值除以0则会抛出异常：java.lang.ArithmeticException: / by zero(除以0异常)。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5.13</span> / <span class="number">0</span>);<span class="comment">//输出Infinity</span></span><br><span class="line">System.out.println(-<span class="number">5.13</span> / <span class="number">0</span>);<span class="comment">//输出-Infinity</span></span><br><span class="line">System.out.println(<span class="number">0.0</span> / <span class="number">0.0</span>);<span class="comment">//输出NaN</span></span><br><span class="line">System.out.println(<span class="number">0</span> / <span class="number">0</span>);<span class="comment">//非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> q = <span class="number">0.0</span>;</span><br><span class="line">System.out.println(q/q == Float.NaN);<span class="comment">//输出false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> s = Double.NEGATIVE_INFINITY;</span><br><span class="line"><span class="keyword">float</span> g = Float.NEGATIVE_INFINITY;</span><br><span class="line"><span class="keyword">double</span> m = Float.POSITIVE_INFINITY;</span><br><span class="line"><span class="comment">//float n = Double.POSITIVE_INFINITY;非法</span></span><br><span class="line"></span><br><span class="line">System.out.println(Double.NaN == Float.NaN);<span class="comment">//输出false</span></span><br><span class="line">System.out.println(s == g);<span class="comment">//输出true</span></span><br><span class="line">System.out.println(s == m);<span class="comment">//输出false</span></span><br><span class="line">System.out.println(<span class="number">6.0</span> / <span class="number">0</span> == <span class="number">100.0</span> / <span class="number">0</span>);<span class="comment">//输出true</span></span><br></pre></td></tr></table></figure><h1 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h1><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180812/I5GEmdcifE.jpg?imageslim" alt="mark"></p><p>当把任何基本类型的值和字符串值进行连接运算时，基本类型的值将会自动转换为字符串类型。</p><p>当一个算术表达式中包含多个基本类型的值时，整个算术表达式的数据类型将会发生自动提升：</p><ul><li>所有byte类型、short类型、char类型将被提升到int类型。</li><li>整个算术表达式的数据类型自动提升到与表达式中最高等级操作数同样的类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="number">2.5f</span> + <span class="string">""</span>;</span><br><span class="line">System.out.println(str1);<span class="comment">//输出2.5</span></span><br><span class="line"></span><br><span class="line">String str2 = <span class="keyword">true</span> + <span class="string">""</span>;</span><br><span class="line">System.out.println(str2);<span class="comment">//输出true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="number">3</span> + <span class="number">4</span> + <span class="string">"Hello"</span>);<span class="comment">//输出7Hello</span></span><br><span class="line">System.out.println(<span class="string">"Hello"</span> + <span class="number">3</span> + <span class="number">4</span>);<span class="comment">//输出Hello34</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">'a'</span> + <span class="number">2</span> + <span class="string">"Hello"</span>);<span class="comment">//输出99Hello</span></span><br><span class="line">System.out.println(<span class="string">"Hello"</span> + <span class="string">'a'</span> + <span class="number">2</span>);<span class="comment">//输出Helloa2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//s = s-2;非法</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s-<span class="number">2</span>);<span class="comment">//合法</span></span><br><span class="line">s -= <span class="number">2</span>;<span class="comment">//合法</span></span><br><span class="line">System.out.println(s);<span class="comment">//输出1</span></span><br></pre></td></tr></table></figure><h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><p>缩小转换会发生数据丢失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = (<span class="keyword">byte</span>)<span class="number">0B11101001</span>;</span><br><span class="line">System.out.println(a);<span class="comment">//输出-23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0B11101001</span>;</span><br><span class="line">System.out.println(b);<span class="comment">//输出233</span></span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>求余运算符和自加自减运算符均可以操作浮点型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5.2</span> % <span class="number">2.5</span>);<span class="comment">//输出0.20000000000000018</span></span><br><span class="line">System.out.println(<span class="number">5</span> % <span class="number">0.0</span>);<span class="comment">//输出NaN</span></span><br><span class="line">System.out.println(<span class="number">0</span> % <span class="number">5</span>);<span class="comment">//输出0</span></span><br><span class="line">System.out.println(<span class="number">0</span> % <span class="number">0.0</span>);<span class="comment">//输出NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> w = <span class="number">4.3f</span>;</span><br><span class="line">w++;</span><br><span class="line">System.out.println(w);<span class="comment">//输出5.3</span></span><br></pre></td></tr></table></figure><h2 id="位运算符-7个"><a href="#位运算符-7个" class="headerlink" title="位运算符(7个)"></a>位运算符(7个)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> | <span class="number">9</span>);<span class="comment">//输出13</span></span><br><span class="line">System.out.println(<span class="number">5</span> &amp; <span class="number">9</span>);<span class="comment">//输出1</span></span><br><span class="line">System.out.println(~-<span class="number">5</span>);<span class="comment">//输出4</span></span><br><span class="line">System.out.println(<span class="number">5</span> ^ <span class="number">9</span>);<span class="comment">//输出12</span></span><br><span class="line">System.out.println(<span class="number">5</span> &lt;&lt; <span class="number">2</span>);<span class="comment">//输出20</span></span><br><span class="line">System.out.println(-<span class="number">5</span> &lt;&lt; <span class="number">2</span>);<span class="comment">//输出-20</span></span><br><span class="line">System.out.println(-<span class="number">5</span> &gt;&gt; <span class="number">2</span>);<span class="comment">//输出-2</span></span><br><span class="line">System.out.println(-<span class="number">5</span> &gt;&gt;&gt; <span class="number">2</span>);<span class="comment">//输出107374182</span></span><br></pre></td></tr></table></figure><p><strong>以上均是对补码进行操作。</strong></p><p>右移运算符&gt;&gt;：把第一个操作数的二进制码右移指定位数(第二个操作数指定)后，左边空出来的位用<strong>原来的符号位</strong>来填充。</p><p>无符号右移运算符&gt;&gt;&gt;：把第一个操作数的二进制码右移指定位数(第二个操作数指定)后，左边空出来的位<strong>总是用0</strong>来填充。</p><p>移位运算原则：</p><ul><li>对于低于int类型的操作数总是先自动类型转换为int类型后再移位。</li><li>对于int类型的整数a&gt;&gt;b，当b&gt;32时，系统先对32求余，得到的结果才是真正移位的位数。</li><li>对于long类型的整数a&gt;&gt;b，当b&gt;64时，系统先对64求余，得到的结果才是真正移位的位数。</li></ul><p><strong>若移位没有发生有效位的丢失，则左移n位相当于乘以2的n次方，右移n位相当于除以2的n次方。</strong></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>对于==和!=运算符，如果两个操作数都是引用类型，那么只有当两个引用变量类型具有父子关系时才可以比较，而且这两个引用必须指向同一个对象(不同对象)才会返回true。</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(!<span class="keyword">false</span>);<span class="comment">//输出true</span></span><br><span class="line">System.out.println(<span class="number">5</span> &gt; <span class="number">3</span> &amp;&amp; <span class="string">'6'</span> &lt; <span class="number">10</span>);<span class="comment">//输出false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">5</span> &gt; <span class="number">4</span> &amp;&amp; ++x &gt; <span class="number">10</span>)</span><br><span class="line">System.out.println(x);<span class="comment">//输出11</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">5</span> &gt; <span class="number">4</span> &amp; ++x &gt; <span class="number">10</span>)</span><br><span class="line">System.out.println(x);<span class="comment">//输出12</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">5</span> &gt; <span class="number">4</span> || ++x &gt; <span class="number">10</span>)</span><br><span class="line">System.out.println(x);<span class="comment">//输出12</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">5</span> &gt; <span class="number">4</span> | ++x &gt; <span class="number">10</span>)</span><br><span class="line">System.out.println(x);<span class="comment">//输出13</span></span><br></pre></td></tr></table></figure><p>对于短路逻辑或||而言，如果第一个数返回true，则不再对第二个操作数求值，直接返回true；而不短路或|总是执行前后两个操作数。</p><p>对于短路逻辑与&amp;&amp;而言，如果第一个数返回false，则不再对第二个操作数求值，直接返回false；而不短路与&amp;总是执行前后两个操作数。</p><h2 id="运算符结合的结合性与优先级"><a href="#运算符结合的结合性与优先级" class="headerlink" title="运算符结合的结合性与优先级"></a>运算符结合的结合性与优先级</h2><p>除单目运算符、赋值运算符、三目运算符是从右到左结合的，其他运算符都是从左到右结合的。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180812/Emi0j32h6J.jpg?imageslim" alt="mark"></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>java控制台五子棋游戏</title>
      <link href="/2018/08/12/java/java%E5%BA%94%E7%94%A8/java%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BA%94%E5%AD%90%E6%A3%8B%E6%B8%B8%E6%88%8F/"/>
      <url>/2018/08/12/java/java%E5%BA%94%E7%94%A8/java%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BA%94%E5%AD%90%E6%A3%8B%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<p>纪念我的第一次实践。</p><a id="more"></a><p>注意：</p><ul><li>本项目在IDEA下调试完毕，已解决目前已知所有bug，sublime上似乎跑不了，eclipse没有试过。（更新：只能在IDEA上跑，将其打包成jar后通过Powershell跑棋盘会错位）</li><li>棋盘方格为搜狗输入法下的制表符，为了保证棋盘的美观，需设定IDEA控制台行间距为0.7。</li><li>本项目电脑玩家落子设定为在用户最后一次落子周围八格内随机落子，若有大佬能提供合适的人工智能算法请联系QQ：549007298，感激不尽。</li><li>本项目判断是否获胜设定为依次检查最后一次落子所在的每行每列及每条对角线的同色连续棋子数，若有大佬能提供更优化的算法联系方式同上。</li><li>本项目前期曾参考<a href="https://blog.csdn.net/zhaohuiyang_949/article/details/80107931" target="_blank" rel="noopener">java控制台五子棋游戏</a>。</li><li>若有疑问，欢迎咨询，联系方式同上。</li></ul><p>源码如下：</p><h2 id="棋盘类"><a href="#棋盘类" class="headerlink" title="棋盘类"></a>棋盘类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Gobang;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Created by Ben Wen on 2018/8/9.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> Gobang.Gobang.computer;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> Gobang.Gobang.man;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> Gobang.Gobang.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chessboard</span> </span>&#123;<span class="comment">//棋盘类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> BOARD_SIZE = <span class="number">15</span>;<span class="comment">//棋盘大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String BLACK = <span class="string">"○"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String WHITE = <span class="string">"●"</span>;</span><br><span class="line">    <span class="keyword">public</span> String[][] board;<span class="comment">//表示棋盘的数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> numChess = <span class="number">0</span>;<span class="comment">//棋子总数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBoard</span> <span class="params">()</span></span>&#123;<span class="comment">//初始化棋盘</span></span><br><span class="line">        board = <span class="keyword">new</span> String[BOARD_SIZE][BOARD_SIZE];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; BOARD_SIZE;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; BOARD_SIZE;j++) &#123;</span><br><span class="line">                board[i][j] = <span class="string">"╋"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBoard</span> <span class="params">()</span></span>&#123;<span class="comment">//打印棋盘（用了些骚操作，为了保证棋盘的美观需设定IDEA控制台行间距为0.7）</span></span><br><span class="line">        System.out.println(<span class="string">" 01  02  03  04  05  06  07  08  09  10  11  12  13  14  15  X轴"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; BOARD_SIZE;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">9</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">"0"</span>+ (i+<span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; BOARD_SIZE;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j != BOARD_SIZE-<span class="number">1</span>)</span><br><span class="line">                    System.out.print(board[j][i] + <span class="string">"━"</span>);<span class="comment">//注意此处将棋盘做了一次翻转处理</span></span><br><span class="line">                <span class="keyword">else</span> System.out.println(board[j][i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i != BOARD_SIZE-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; BOARD_SIZE-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    System.out.print(<span class="string">"  ┃"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"  ┃"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Y轴\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoard</span><span class="params">(<span class="keyword">int</span> PosX,<span class="keyword">int</span> PosY,<span class="keyword">int</span> chessman)</span></span>&#123;<span class="comment">//落子</span></span><br><span class="line">        <span class="keyword">if</span> (order == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (chessman == computer)</span><br><span class="line">                board[PosX-<span class="number">1</span>][PosY-<span class="number">1</span>] = WHITE;</span><br><span class="line">            <span class="keyword">else</span> board[PosX-<span class="number">1</span>][PosY-<span class="number">1</span>] = BLACK;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessman == man)</span><br><span class="line">                board[PosX-<span class="number">1</span>][PosY-<span class="number">1</span>] = WHITE;</span><br><span class="line">            <span class="keyword">else</span> board[PosX-<span class="number">1</span>][PosY-<span class="number">1</span>] = BLACK;</span><br><span class="line">        &#125;</span><br><span class="line">        numChess++;<span class="comment">//总棋子数加1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="游戏类"><a href="#游戏类" class="headerlink" title="游戏类"></a>游戏类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Gobang;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Created by Ben Wen on 2018/8/9.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> Gobang.Chessboard.BLACK;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> Gobang.Chessboard.BOARD_SIZE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> Gobang.Chessboard.WHITE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gobang</span> </span>&#123;<span class="comment">//游戏类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> computer = <span class="number">1</span>;<span class="comment">//用来表示电脑玩家</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> man = <span class="number">2</span>;<span class="comment">//用来表示用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WIN_COUNT = <span class="number">5</span>;<span class="comment">//用来表示获胜所需连子数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> order;<span class="comment">//用来表示执行顺序，1表示用户执黑先走，2表示用户执白后走</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> PosX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> PosY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> winner;<span class="comment">//用来表示获胜方</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] computerPosArr;<span class="comment">//用来获取computerDo方法的返回值</span></span><br><span class="line">    <span class="keyword">private</span> Chessboard chessboard;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] a = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Gobang</span> <span class="params">(Chessboard chessboard)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chessboard = chessboard;</span><br><span class="line">    &#125;<span class="comment">//构造函数，便于使用Chessboard类的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         <span class="keyword">new</span> Gobang(<span class="keyword">new</span> Chessboard()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isOver = <span class="keyword">false</span>;<span class="comment">//游戏是否结束的标志</span></span><br><span class="line"></span><br><span class="line">        chessboard.initBoard();<span class="comment">//初始化棋盘</span></span><br><span class="line">        System.out.println(<span class="string">"请选择您是黑子先走(1)还是白子后走(2)："</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;<span class="comment">//获取order的值，即执行顺序</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));<span class="comment">//获取用户输入</span></span><br><span class="line">                order = Integer.parseInt(reader.readLine());</span><br><span class="line">                <span class="keyword">if</span> (order == <span class="number">1</span> || order == <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"输入错误，请输入数字1或2："</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"输入错误，请输入数字1或2："</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (order == <span class="number">1</span>) &#123;<span class="comment">//用户执黑先走</span></span><br><span class="line">            chessboard.printBoard();<span class="comment">//打印棋盘</span></span><br><span class="line">            System.out.println(<span class="string">"请输入您下棋的坐标，应以x(空格)y的格式，其中x、y为不大于15的正整数："</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">                String inputStr = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">while</span> ((inputStr = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        isOver = <span class="keyword">false</span>;<span class="comment">//游戏未结束</span></span><br><span class="line"></span><br><span class="line">                        String[] posStrArr = inputStr.split(<span class="string">" "</span>);</span><br><span class="line">                        PosX = Integer.parseInt(posStrArr[<span class="number">0</span>]);<span class="comment">//提取出用户输入中的x坐标</span></span><br><span class="line">                        PosY = Integer.parseInt(posStrArr[<span class="number">1</span>]);<span class="comment">//提取出用户输入中的y坐标</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!isValid(PosX, PosY, man)) &#123;<span class="comment">//判断用户输入是否合理</span></span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        chessboard.setBoard(PosX, PosY, man);<span class="comment">//用户落子</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (isWin(PosX, PosY, man)) &#123;<span class="comment">//判断用户是否获胜</span></span><br><span class="line">                            isOver = <span class="keyword">true</span>;<span class="comment">//游戏可以结束</span></span><br><span class="line">                            winner = man;<span class="comment">//获胜者为用户</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;<span class="comment">//用户未获胜</span></span><br><span class="line">                            computerPosArr = computerDo();<span class="comment">//获取电脑玩家输入</span></span><br><span class="line">                            chessboard.setBoard(computerPosArr[<span class="number">0</span>], computerPosArr[<span class="number">1</span>], computer);<span class="comment">//电脑玩家落子</span></span><br><span class="line">                            <span class="keyword">if</span> (isWin(computerPosArr[<span class="number">0</span>], computerPosArr[<span class="number">1</span>], computer)) &#123;<span class="comment">//判断电脑玩家是否获胜</span></span><br><span class="line">                                isOver = <span class="keyword">true</span>;<span class="comment">//游戏可以结束</span></span><br><span class="line">                                winner = computer;<span class="comment">//获胜者为电脑</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (isOver) &#123;<span class="comment">//游戏是否结束</span></span><br><span class="line">                            <span class="keyword">if</span> (isReplay(winner)) &#123;<span class="comment">//是否重新开始</span></span><br><span class="line">                                chessboard.initBoard();</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        chessboard.printBoard();</span><br><span class="line">                        System.out.println(<span class="string">"请输入您下棋的坐标，应以x(空格)y的格式，其中x、y为不大于15的正整数："</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;<span class="comment">//数字格式异常，当未按正确格式输入但PosX、PosY均有值时抛出</span></span><br><span class="line">                        System.out.println(<span class="string">"输入错误，请按 数字(空格)数字 格式输入："</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<span class="comment">//数组越界，当只输入了一个值，即PosY无值时抛出</span></span><br><span class="line">                        System.out.println(<span class="string">"输入错误，请按 数字(空格)数字 格式输入："</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;<span class="comment">//当输入时出现异常时抛出</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//用户执白后走</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                computerPosArr = computerDo();</span><br><span class="line">                chessboard.setBoard(computerPosArr[<span class="number">0</span>], computerPosArr[<span class="number">1</span>], computer);</span><br><span class="line">                chessboard.printBoard();<span class="comment">//先打印电脑玩家落子后的棋盘</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isWin(computerPosArr[<span class="number">0</span>], computerPosArr[<span class="number">1</span>], computer)) &#123;</span><br><span class="line">                    winner = computer;</span><br><span class="line">                    isOver = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果电脑玩家未获胜，则获取用户输入</span></span><br><span class="line">                    System.out.println(<span class="string">"请输入您下棋的坐标，应以x(空格)y的格式，其中x、y为不大于15的正整数："</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">                        String inputStr = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">while</span> ((inputStr = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                String[] posStrArr = inputStr.split(<span class="string">" "</span>);</span><br><span class="line">                                PosX = Integer.parseInt(posStrArr[<span class="number">0</span>]);<span class="comment">//提取出用户输入中的x坐标</span></span><br><span class="line">                                PosY = Integer.parseInt(posStrArr[<span class="number">1</span>]);<span class="comment">//提取出用户输入中的y坐标</span></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (!isValid(PosX, PosY, man)) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                chessboard.setBoard(PosX, PosY, man);</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (isWin(PosX, PosY, man)) &#123;</span><br><span class="line">                                    winner = man;</span><br><span class="line">                                    isOver = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                                System.out.println(<span class="string">"输入错误，请按 数字(空格)数字 格式输入："</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">                                System.out.println(<span class="string">"输入错误，请按 数字(空格)数字 格式输入："</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isOver) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isReplay(winner)) &#123;</span><br><span class="line">                        chessboard.initBoard();</span><br><span class="line">                        isOver = <span class="keyword">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] computerDo () &#123;<span class="comment">//获取电脑玩家落子（思路为在用户最近一次落子周围八个点中随机落子）</span></span><br><span class="line">        <span class="keyword">boolean</span> isRight = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> randomX = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> randomY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!isRight) &#123;</span><br><span class="line">            randomX = (<span class="keyword">int</span>)Math.round((Math.random() * <span class="number">3</span>) - <span class="number">1.5</span>);<span class="comment">//在-1,0,1中随机获取一值（round方法表示四舍五入）</span></span><br><span class="line">            randomY = (<span class="keyword">int</span>)Math.round((Math.random() * <span class="number">3</span>) - <span class="number">1.5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(randomX) != <span class="number">2</span> &amp;&amp; Math.abs(randomY) != <span class="number">2</span>) &#123;<span class="comment">//排除当randomX和randomY等于正负2的情况</span></span><br><span class="line">                <span class="keyword">if</span> (PosX == <span class="number">0</span> &amp;&amp; PosY == <span class="number">0</span>) &#123;<span class="comment">//若电脑玩家走第一步，则随机获取落子点</span></span><br><span class="line">                    PosX = (<span class="keyword">int</span>)(Math.random() * BOARD_SIZE);</span><br><span class="line">                    PosY = (<span class="keyword">int</span>)(Math.random() * BOARD_SIZE);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span> (isValid(PosX+randomX, PosY+randomY, computer)) &#123;<span class="comment">//判断该获取的点是否合理</span></span><br><span class="line">                    isRight = <span class="keyword">true</span>;<span class="comment">//合理则退出循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] computerPosArr = &#123;randomX+PosX, randomY+PosY&#125;;<span class="comment">//将结果以数组形式返回</span></span><br><span class="line">        <span class="keyword">return</span> computerPosArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isWin</span> <span class="params">(<span class="keyword">int</span> PosX, <span class="keyword">int</span> PosY, <span class="keyword">int</span> chessman)</span> </span>&#123;<span class="comment">//判断是否获胜</span></span><br><span class="line">        String chess;<span class="comment">//用来表示此次调用方法需要判断的棋子的颜色</span></span><br><span class="line">        <span class="keyword">int</span> samecount = <span class="number">1</span>;<span class="comment">//用来统计连子数</span></span><br><span class="line">        <span class="keyword">boolean</span> right1 = <span class="keyword">true</span>;<span class="comment">//表示某一个方向上同色棋子是否连续</span></span><br><span class="line">        <span class="keyword">boolean</span> right2 = <span class="keyword">true</span>;<span class="comment">//表示另一个方向上同色棋子是否连续</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (order == <span class="number">1</span>)</span><br><span class="line">            chess = ((chessman == man) ? BLACK : WHITE);</span><br><span class="line">        <span class="keyword">else</span> chess = ((chessman == computer) ? BLACK : WHITE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (chessboard.numChess &lt; <span class="number">9</span>)<span class="comment">//当总棋子数小于9时一定不会有一方获胜</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; WIN_COUNT &amp;&amp; (right1 || right2);i++)&#123;<span class="comment">//判断左右方向是否满足5连子</span></span><br><span class="line">            <span class="keyword">if</span> (right1 &amp;&amp; PosX+a[i] &gt;= <span class="number">1</span> &amp;&amp; PosX+a[i] &lt;= <span class="number">15</span> &amp;&amp; chessboard.board[PosX+a[i]-<span class="number">1</span>][PosY-<span class="number">1</span>].equals(chess))&#123;</span><br><span class="line">                samecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> right1 = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (right2 &amp;&amp; PosX-a[i] &gt;= <span class="number">1</span> &amp;&amp; PosX-a[i] &lt;= <span class="number">15</span> &amp;&amp; chessboard.board[PosX-a[i]-<span class="number">1</span>][PosY-<span class="number">1</span>].equals(chess))&#123;</span><br><span class="line">                samecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> right2 = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (samecount &gt;= <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        samecount = <span class="number">1</span>;</span><br><span class="line">        right1 = <span class="keyword">true</span>;</span><br><span class="line">        right2 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; WIN_COUNT &amp;&amp; (right1 || right2);i++)&#123;<span class="comment">//判断上下方向是否满足5连子</span></span><br><span class="line">            <span class="keyword">if</span> (right1 &amp;&amp; PosY+a[i] &gt;= <span class="number">1</span> &amp;&amp; PosY+a[i] &lt;= <span class="number">15</span> &amp;&amp; chessboard.board[PosX-<span class="number">1</span>][PosY+a[i]-<span class="number">1</span>].equals(chess))&#123;</span><br><span class="line">                samecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> right1 = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (right2 &amp;&amp; PosY-a[i] &gt;= <span class="number">1</span> &amp;&amp; PosY-a[i] &lt;= <span class="number">15</span> &amp;&amp; chessboard.board[PosX-<span class="number">1</span>][PosY-a[i]-<span class="number">1</span>].equals(chess))&#123;</span><br><span class="line">                samecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> right2 = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (samecount &gt;= <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        samecount = <span class="number">1</span>;</span><br><span class="line">        right1 = <span class="keyword">true</span>;</span><br><span class="line">        right2 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; WIN_COUNT &amp;&amp; (right1 || right2);i++)&#123;<span class="comment">//判断左上--右下方向是否满足5连子</span></span><br><span class="line">            <span class="keyword">if</span> (right1 &amp;&amp; PosX+a[i] &gt;= <span class="number">1</span> &amp;&amp; PosX+a[i] &lt;= <span class="number">15</span> &amp;&amp; PosY+a[i] &gt;= <span class="number">1</span> &amp;&amp; PosY+a[i] &lt;= <span class="number">15</span> &amp;&amp; chessboard.board[PosX+a[i]-<span class="number">1</span>][PosY+a[i]-<span class="number">1</span>].equals(chess))&#123;</span><br><span class="line">                samecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> right1 = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (right2 &amp;&amp; PosX-a[i] &gt;= <span class="number">1</span> &amp;&amp; PosX-a[i] &lt;= <span class="number">15</span> &amp;&amp; PosY-a[i] &gt;= <span class="number">1</span> &amp;&amp; PosY-a[i] &lt;= <span class="number">15</span> &amp;&amp; chessboard.board[PosX-a[i]-<span class="number">1</span>][PosY-a[i]-<span class="number">1</span>].equals(chess))&#123;</span><br><span class="line">                samecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> right2 = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (samecount &gt;= <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        samecount = <span class="number">1</span>;</span><br><span class="line">        right1 = <span class="keyword">true</span>;</span><br><span class="line">        right2 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; WIN_COUNT &amp;&amp; (right1 || right2);i++)&#123;<span class="comment">//判断左下--右上方向是否满足5连子</span></span><br><span class="line">            <span class="keyword">if</span> (right1 &amp;&amp; PosX-a[i] &gt;= <span class="number">1</span> &amp;&amp; PosX-a[i] &lt;= <span class="number">15</span> &amp;&amp; PosY+a[i] &gt;= <span class="number">1</span> &amp;&amp; PosY+a[i] &lt;= <span class="number">15</span> &amp;&amp; chessboard.board[PosX-a[i]-<span class="number">1</span>][PosY+a[i]-<span class="number">1</span>].equals(chess))&#123;</span><br><span class="line">                samecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> right1 = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (right2 &amp;&amp; PosX+a[i] &gt;= <span class="number">1</span> &amp;&amp; PosX+a[i] &lt;= <span class="number">15</span> &amp;&amp; PosY-a[i] &gt;= <span class="number">1</span> &amp;&amp; PosY-a[i] &lt;= <span class="number">15</span> &amp;&amp; chessboard.board[PosX+a[i]-<span class="number">1</span>][PosY-a[i]-<span class="number">1</span>].equals(chess))&#123;</span><br><span class="line">                samecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> right2 = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (samecount &gt;= <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span> <span class="params">(<span class="keyword">int</span> PosX, <span class="keyword">int</span> PosY, <span class="keyword">int</span> chessman)</span></span>&#123;<span class="comment">//判断输入是否合理</span></span><br><span class="line">        <span class="keyword">if</span> (PosX &lt; <span class="number">1</span> || PosX &gt; BOARD_SIZE || PosY &lt; <span class="number">1</span> || PosY &gt; BOARD_SIZE)&#123;</span><br><span class="line">            <span class="keyword">if</span> (chessman == man)<span class="comment">//若判断玩家输入时的合理性时才输出这句话</span></span><br><span class="line">                System.out.println(<span class="string">"坐标只能为小于等于"</span> + (BOARD_SIZE) + <span class="string">"的正整数，请重新输入："</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!chessboard.board[PosX-<span class="number">1</span>][PosY-<span class="number">1</span>].equals(<span class="string">"╋"</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (chessman == man)</span><br><span class="line">                System.out.println(<span class="string">"当前位置已有棋子，请重新输入："</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isReplay</span> <span class="params">(<span class="keyword">int</span> chessman)</span></span>&#123;<span class="comment">//判断是否开始新的一局</span></span><br><span class="line">        <span class="keyword">int</span> x = chessboard.numChess;<span class="comment">//表示总棋子数</span></span><br><span class="line">        <span class="keyword">int</span> y;<span class="comment">//表示用户落子数</span></span><br><span class="line">        <span class="keyword">if</span> (order == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                y = x / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> y = x / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> y = x / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (chessman == man)&#123;</span><br><span class="line">            chessboard.printBoard();</span><br><span class="line">            System.out.println(<span class="string">"恭喜你赢了！共落子"</span> + x + <span class="string">"粒。其中您落子"</span> + y + <span class="string">"粒。"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> System.out.println(<span class="string">"很遗憾你输了！共落子"</span> + x + <span class="string">"粒。其中您落子"</span> + y + <span class="string">"粒。"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"是否再来一局？(y/n)"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            <span class="keyword">if</span> (reader.readLine().equals(<span class="string">"y"</span>)) &#123;</span><br><span class="line">                chessboard.numChess = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
          <category> java应用 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>图的最短路径算法</title>
      <link href="/2018/08/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/"/>
      <url>/2018/08/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>对于网图来说，最短路径是指两顶点间经过的边上权值之和最少的路径，并且我们称路径上的第一个顶点是源点，最后一个顶点是终点。</p><a id="more"></a><h1 id="迪杰斯特拉-Dijkstra-算法"><a href="#迪杰斯特拉-Dijkstra-算法" class="headerlink" title="迪杰斯特拉(Dijkstra)算法"></a>迪杰斯特拉(Dijkstra)算法</h1><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180808/0aI0L045GE.jpg?imageslim" alt="mark"></p><p><strong>思路：按路径长度递增的次序产生最短路径，从某一个顶点开始，寻找与当前整体距离最近的顶点，依次找下去，直到到达终点。</strong></p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY 65535</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Pathmatirx[MAXVEX];<span class="comment">//用于存储最短路径下标数组</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ShortPathTable[MAXVEX];<span class="comment">//用于存储到当前整体到其余各点最短路径的权值和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortestPath_Dijkstra</span> <span class="params">(MGraph G,<span class="keyword">int</span> v0,Pathmatirx *P,ShortPathTable *D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min,k;</span><br><span class="line">    <span class="keyword">int</span> final[MAXVEX];<span class="comment">//final[w]=1表示求得顶点v0至vw的最短路径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>;v &lt; G.numVertexes;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        final[v] = <span class="number">0</span>;<span class="comment">//全部顶点初始化为未知路径状态</span></span><br><span class="line">        (*D)[v] = G.arc[v0][v];<span class="comment">//用当前整体v0到各个顶点的边的权值初始化数组D</span></span><br><span class="line">        (*P)[v] = <span class="number">0</span>;<span class="comment">//初始化路径数组为0</span></span><br><span class="line">    &#125;</span><br><span class="line">    (*D)[v0] = <span class="number">0</span>;<span class="comment">//v0到v0的路径为0(这句话似乎可以省略???)</span></span><br><span class="line">    final[v0] = <span class="number">1</span>;<span class="comment">//v0到v0不需要求路径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>;v &lt; G.numVertexes;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        min = INFINITY;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>;w &lt; G.numVertexes;w++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!final[w] &amp;&amp; (*D)[w] &lt; min)</span><br><span class="line">            &#123;</span><br><span class="line">                k = w;<span class="comment">//更新为最小权值所在边另一个顶点的下标</span></span><br><span class="line">                min = (*D)[w];<span class="comment">//更新为离当前整体的最小权值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//该循环用于寻找离当前整体最近的顶点</span></span><br><span class="line">        final[k] = <span class="number">1</span>;<span class="comment">//将目前找到的最近的顶点置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>;w &lt; G.numVertexes;w++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!final[w] &amp;&amp; (min + G.arc[k][w] &lt; (*D)[w]))</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">//说明找到了更短的路径，修改两数组</span></span><br><span class="line">                (*D)[w] = min + G.arc[k][w];</span><br><span class="line">                (*P)[w] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//该循环用于取新整体与原整体到其余顶点的边的权值的最小值来更新数组D</span></span><br><span class="line">        <span class="comment">//或者说通过新顶点搭桥产生的路径变化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>理解上注意：该算法并不会刻意寻找到某个顶点的最短路径，因此不能按照一笔画的思路来理解该算法。</strong></p><p><strong>final数组最终为:{1,1,1,1,1,1,1,1,1}，它表示所有顶点均完成了最短路径的查找工作。</strong></p><p><strong>D数组最终为:{0,1,4,7,5,8,10,12,16}，它表示v0到各个顶点的最短路径数，如v0到v8的最短距离为16。</strong></p><p><strong>P数组最终为:{0,0,1,4,2,4,3,6,7}，它表示最短路径所经过的顶点，P[8]=7的意思是v8的前驱顶点是v7，如v0到v8经过的路径为v8←v7←v6←v3←v4←v2←v1←v0。</strong></p><p><strong>可以得到v0到任意一个顶点的最短路径和路径长度，如v0到v8的最短路径中，没有v5，但D[5]=8表示v0到v5的最短路径长度为8，由P数组可得v0到v5经过的最短路径为v5←v4←v2←v1←v0。</strong></p><p><strong>时间复杂度为O(n²)，若求所有顶点到所有顶点的最短路径则执行n次，时间复杂度为O(n³)。</strong></p><h1 id="弗洛伊德-Floyd-算法"><a href="#弗洛伊德-Floyd-算法" class="headerlink" title="弗洛伊德(Floyd)算法"></a>弗洛伊德(Floyd)算法</h1><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180809/Gcb8EKB4Hj.jpg?imageslim" alt="mark"></p><p>原理：<br>$$<br>D^0[v][w] = min {D^(-1) [v][w] , D^(-1)[v][0] + D^(-1)[0][w]}<br>$$<br><em>D^0、P^0表示初始数组，D^(-1)、P^(-1)表示经过v1搭桥处理后的数组，依次类推。</em></p><p><strong>即：任意寻找一个顶点，判断以该顶点为桥任意两个顶点之间的距离是否会缩短。</strong></p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Pathmatirx[MAXVEX][MAXVEX];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ShortPathTable[MAXVEX][MAXVEX];</span><br><span class="line"><span class="comment">//因为求的是所有顶点到所有顶点的最短路径，所以是二维数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortestPath_Floyd</span> <span class="params">(MGraph G,Pathmatirx *P,ShortPathTable *D)</span></span></span><br><span class="line"><span class="function"><span class="comment">//P[v][w]存储最短路径，D[v][w]存储带权长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>;v &lt; G.numVertexes;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>;w &lt; G.numVertexes;w++)</span><br><span class="line">        &#123;</span><br><span class="line">            (*D)[v][w] = G.arc[v][w];</span><br><span class="line">            (*P)[v][w] = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//初始化操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; G.numVertexes;k++)<span class="comment">//k表示中转顶点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>;v &lt; G.numVertexes;v++)<span class="comment">//v表示起始顶点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>;w &lt; G.numVertexes;w++)<span class="comment">//w表示结束顶点</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((*D)[v][w] &gt; (*D)[v][k] + (*D)[k][w])</span><br><span class="line">                &#123;</span><br><span class="line">                    (*D)[v][w] = (*D)[v][k] + (*D)[k][w];</span><br><span class="line">                    (*P)[v][w] = (*P)[v][k];<span class="comment">//路径设置为经过下标为k的顶点</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终结果为：</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180809/F4afC9L2FC.jpg?imageslim" alt="mark"></p><p>不难发现，v0所在的列与Dijkstra算法结果完全一致。</p><p>如求v4到v7的最短路径，P[4]/[7]=3，P[3]/[7]=6，P[6]/[7]=7，故路径为v4→v3→v6→v7。(<em>markdown中两个方括号表示链接，为了区分我在中间加了/表示二维数组。</em>)</p><p>求最短路径的显示代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>;v &lt; G.numVertexes;v++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> w = v+<span class="number">1</span>;w &lt; G.numVertexes;w++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"v%d-v%d weight: %d "</span>,v,w,(*D)[v][w]);</span><br><span class="line">        k = P[v][w];<span class="comment">//获得第一个路径顶点下标</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"path: %d"</span>,v);<span class="comment">//打印源点</span></span><br><span class="line">        <span class="keyword">while</span> (k != w)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" -&gt; %d"</span>,k);<span class="comment">//打印路径顶点</span></span><br><span class="line">            k = P[k][w];<span class="comment">//获得下一个路径顶点下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" -&gt; %d\n"</span>,w);<span class="comment">//打印终点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度为O(n³)，面临需要求所有顶点到所有顶点的最短路径时比较方便。</strong></p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>图的最小生成树算法</title>
      <link href="/2018/08/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/"/>
      <url>/2018/08/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最小生成树：构成连通网的最小代价生成树。即用n-1条边将一个n个顶点的连通图连接起来，并使得权值的和最小。</p><a id="more"></a><p><strong>最小权值和而非最短路径，即不为一笔画。</strong></p><h1 id="普里姆-Prim-算法"><a href="#普里姆-Prim-算法" class="headerlink" title="普里姆(Prim)算法"></a>普里姆(Prim)算法</h1><p>定义：假设N = {P,{E}}是连通网，TE是N上最小生成树中边的集合。算法从U={u0}(u0∈V),TE={}开始。重复执行下述操作：在所有u∈U,v∈V-U的边(u,v)∈E中找一条代价最小的边(u0,v0)并入TE，同时v0并入U，直到U=V为止。此时TE中必有n-1条边，则T=(V,{TE})为N的最小生成树。</p><p><strong>一句话概括：从一个顶点v0出发，找当前已纳入最小生成树的整体向外扩散的最小权值，直到所有顶点均被纳入最小生成树为止。</strong></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180807/AbhIGKI456.jpg?imageslim" alt="mark"></p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MiniSpanTree_Prim</span> <span class="params">(MGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> adjvex[MAXVEX];<span class="comment">//保存相关顶点下标</span></span><br><span class="line">    <span class="comment">//adjvex[0]=1意思为边(v0,v1)在最小生成树中</span></span><br><span class="line">    <span class="keyword">int</span> lowcost[MAXVEX];<span class="comment">//保存相关顶点间边的权值</span></span><br><span class="line">    <span class="comment">//lowcost[i]的值为0即下标为i的顶点加入最小生成树</span></span><br><span class="line">    </span><br><span class="line">    lowcost[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//v0加入生成树</span></span><br><span class="line">    adjvex[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//初始化第一个顶点下标为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; G.numVertexes;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        lowcost[i] = G.arc[<span class="number">0</span>][i];<span class="comment">//将与v0顶点相连的边的权值存入</span></span><br><span class="line">        adjvex[i] = <span class="number">0</span>;<span class="comment">//初始化都为v0的下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以上全为初始化操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>;i &lt; G.numVertexes;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = INFINITY;<span class="comment">//初始化最小权值为∞，用65535代替</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (j &lt; G.numVertexes)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] != <span class="number">0</span> &amp;&amp; lowcost[j] &lt; min)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">//顶点j不在最小生成树中且整体到顶点j的所有边中最小权值小于min</span></span><br><span class="line">                min = lowcost[j];<span class="comment">//让当前权值成为最小值</span></span><br><span class="line">                k = j;<span class="comment">//将当前最小值下标存入k</span></span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//该循环用于寻找当前整体向外扩散的最小值</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%d,%d)"</span>,adjvex[k],k);<span class="comment">//打印当前顶点边中权值最小边</span></span><br><span class="line">        lowcost[k] = <span class="number">0</span>;<span class="comment">//将当前顶点纳入最小生成树</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; G.numVertexes;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] != <span class="number">0</span> &amp;&amp; G.arc[k][j] &lt; lowcost[j])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">//若下标为k的顶点各边的权值小于该顶点被加入最小生成树前整体到这些顶点的最小权值</span></span><br><span class="line">                lowcost[j] = G.arc[k][j];</span><br><span class="line">                adjvex[j] = k;<span class="comment">//将下标为k的顶点存入adjvex</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//该循环用于将新增顶点向外扩散的权值与原整体向外扩散的权值比较后取最小权值更新lowcost数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由循环嵌套可知时间复杂度为O(n²)。</p><h1 id="克鲁斯卡尔-Kruskal-算法"><a href="#克鲁斯卡尔-Kruskal-算法" class="headerlink" title="克鲁斯卡尔(Kruskal)算法"></a>克鲁斯卡尔(Kruskal)算法</h1><p>定义：假设N = {P,{E}}是连通网，则令最小生成树的初始状态为只有n个顶点而无边的非连通图T={V,{}},图中每个顶点自成一个连通分量。在E中选择代价最小的边，若该边依附的顶点落在T中不同连通分量上，则将此边加入到T中，否则舍去此边而选择下一条代价最小的边。依次类推，直到所有顶点都在同一连通分量上为止。</p><p>这里采用边集数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> begin;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;Edge;</span><br></pre></td></tr></table></figure><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180808/aAfD4gEK50.jpg?imageslim" alt="mark"></p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MiniSpanTree_Kruskal</span> <span class="params">(MGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    Edge edges[MAXVEX];<span class="comment">//定义边集数组</span></span><br><span class="line">    <span class="keyword">int</span> parent[MAXVEX];<span class="comment">//定义一数组来判断边与边是否形成环路</span></span><br><span class="line">    <span class="comment">//此处省略将邻接矩阵转化为边集数组且按权由小到大排序的代码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G.numVertexes;i++)</span><br><span class="line">        parent[i] = <span class="number">0</span>;<span class="comment">//初始化数组为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G.numEdges;i++)<span class="comment">//循环每一条边</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = Find(parent,edges[i],begin);</span><br><span class="line">        m = Find(parent,edges[i],end);</span><br><span class="line">        <span class="keyword">if</span> (n != m)<span class="comment">//若n!=m说明此边没有与现有生成树形成环路</span></span><br><span class="line">        &#123;</span><br><span class="line">            parent[n] = m;</span><br><span class="line">            <span class="comment">//将此边的结尾顶点放入下标为起点的parent中，表示该顶点已经在生成树集合中</span></span><br><span class="line">            <span class="comment">//例如parent[5]=8表示v5和v8都在生成树集合中且在同一个连通分量中</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"(%d,%d) %d"</span>,edges[i].begin,edges[i].end,edges[i].weight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span> <span class="params">(<span class="keyword">int</span> *parent,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (parent[f] &gt; <span class="number">0</span>)<span class="comment">//将"两个数组在一个连通分量中"这一结论用数组中的空闲位置来表达</span></span><br><span class="line">        f = parent[f];</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>理解：例如当i = 6时parent数组为:{1,5,8,7,7,8,0,0,6},从parent[0] = 1开始可构建两条指针链：</strong><img src="http://p63sxxlje.bkt.clouddn.com/blog/180808/ml1lcjEaD1.jpg?imageslim" alt="mark"></p><p><strong>可以认为每个连通分量只提供一个指向parent数组中值为0的项的API接口，若某条边能够形成环路，则其begin和end端经过Find函数后得到的n和m必定相等，此即为判断一条边是否满足要求的判断依据。</strong></p><p><strong>此算法的Find函数由边数e决定，时间复杂度为O(loge),而外面有一个for循环e次，故Kruskal算法的时间复杂度为O(eloge)。</strong>(先记下，以后再想原因)</p><p><strong>Kruskal算法主要针对边来展开，边数少时效率非常高，对于稀疏图有很大优势；Prim算法对于稠密图，即边数非常多的情况会更有优势。</strong></p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>图的遍历</title>
      <link href="/2018/08/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2018/08/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<p>图的遍历：从图中某一顶点出发访遍图中其余顶点，且使每一个顶点仅被访问一次，这一过程称为图的遍历。</p><a id="more"></a><h1 id="深度优先遍历-DFS"><a href="#深度优先遍历-DFS" class="headerlink" title="深度优先遍历(DFS)"></a>深度优先遍历(DFS)</h1><p>从图中某个顶点v出发，访问此顶点，然后从v的未被访问的邻接点出发深度优先遍历图，直至图中所有和v有路径相通的顶点都被访问到。</p><p>对于非连通图，只需对它的连通分量分别进行深度优先遍历，即在先前一个顶点进行一次深度优先遍历后，若图中尚有顶点未被访问，则另选一个未被访问的顶点作为起始点，重复上述过程，直到所有顶点都被访问到为止。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180807/8f52523H3J.jpg?imageslim" alt="mark"></p><p>上图中，从顶点A开始一直向右走，遇到访问过的顶点时退回，走右手第二条边，直至返回顶点A。</p><p><strong>DFS其实就是一个递归过程，类似于一棵树的前序遍历。</strong></p><p>邻接矩阵方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Boolean;</span><br><span class="line">Boolean visit[MAX];<span class="comment">//访问标志数组,FALSE表示该顶点未被访问</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span> <span class="params">(MGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G.numVertexes;i++)</span><br><span class="line">        visit[i] = FALSE;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G.numVertexes;i++)</span><br><span class="line">        <span class="keyword">if</span> (!visit[i])<span class="comment">//如果这个顶点没有被访问过</span></span><br><span class="line">            DFS(G,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span> <span class="params">(MGraph G,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[i] = TRUE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,G.vex[i]);<span class="comment">//也可以是其他操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; G.numVertexes;j++)</span><br><span class="line">        <span class="keyword">if</span> (G.arc[i][j] == <span class="number">1</span> &amp;&amp; !visit[i])</span><br><span class="line">            DFS(G,j);<span class="comment">//对被访问的顶点的邻接点递归调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邻接表方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span> <span class="params">(GraphAdjList GL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; GL.numVertexes;i++)</span><br><span class="line">        visit[i] = FALSE;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; GL.numVertexes;i++)</span><br><span class="line">        <span class="keyword">if</span> (!visit[i])<span class="comment">//如果这个顶点没有被访问过</span></span><br><span class="line">            DFS(GL,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span> <span class="params">(GraphAdjList GL,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode *p;</span><br><span class="line">    visit[i] = TRUE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,GL.adjList[i].data);<span class="comment">//也可以是其他操作</span></span><br><span class="line">    p = GL.adjList[i].firstedge;</span><br><span class="line">    <span class="keyword">while</span> (P)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visit[p-&gt;adjvex])</span><br><span class="line">            DFS(GL,p-&gt;adjvex);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>每个顶点都经过且仅经过一次DFS函数，因为只有该函数能设置visit数组值为TRUE</strong></p><p><strong>对于n个顶点e条边的图来说，邻接矩阵方式时间为O(n²),邻接表方式时间为O(n+e),故对于点多边少的稀疏图来说更适合用邻接表。</strong></p><h1 id="广度优先遍历-BFS"><a href="#广度优先遍历-BFS" class="headerlink" title="广度优先遍历(BFS)"></a>广度优先遍历(BFS)</h1><p><strong>原理：每当一个元素出队列，将与该顶点相邻接的所有顶点中未被访问的顶点加入队列，加入前进行打印等处理，类似于图的层序遍历。</strong></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180807/lbbc066f6F.jpg?imageslim" alt="mark"></p><p>邻接矩阵方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span> <span class="params">(MGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Queue Q;</span><br><span class="line">    InitQueue(&amp;Q);<span class="comment">//初始化一个辅助用队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G.numVertexes;i++)</span><br><span class="line">        visit[i] = FALSE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G.numVertexes;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visit[i])</span><br><span class="line">        &#123;</span><br><span class="line">            visit[i] = TRUE;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,G.vex[i]);</span><br><span class="line">            EnQueue(&amp;Q,i);<span class="comment">//将此顶点入队列</span></span><br><span class="line">            <span class="keyword">while</span>(!QueueEmpty(Q))<span class="comment">//当前队列不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                DeQueue(&amp;Q,&amp;i);<span class="comment">//将队中元素出队列并赋值给i</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; G.numVertexes;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (G.arc[i][j] == <span class="number">1</span> &amp;&amp; !visit[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        visit[j] = TRUE;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,G.vex[j]);</span><br><span class="line">                        EnQueue(&amp;Q,j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>只有一个DeQuene函数可以出队列，因此所有顶点均经历过该函数下方的for循环，故时间复杂度为O(n²)。</strong></p><p>邻接表方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span> <span class="params">(GraphAdjList GL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode *p;</span><br><span class="line">    Queue Q;</span><br><span class="line">    InitQueue(&amp;Q);<span class="comment">//初始化一个辅助用队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; GL.numVertexes;i++)</span><br><span class="line">        visit[i] = FALSE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; GL.numVertexes;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visit[i])</span><br><span class="line">        &#123;</span><br><span class="line">            visit[i] = TRUE;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,GL.adjList[i].data);</span><br><span class="line">            EnQueue(&amp;Q,i);<span class="comment">//将此顶点入队列</span></span><br><span class="line">            <span class="keyword">while</span>(!QueueEmpty(Q))<span class="comment">//当前队列不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                DeQueue(&amp;Q,&amp;i);<span class="comment">//将队中元素出队列并赋值给i</span></span><br><span class="line">                p = GL.adjList[i].firstedge;</span><br><span class="line">                <span class="keyword">while</span> (p)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!visit[p-&gt;adjvex])</span><br><span class="line">                    &#123;</span><br><span class="line">                        visit[p-&gt;adjvex] = TRUE;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,GL.adjList[p-&gt;adjvex].data);</span><br><span class="line">                        EnQueue(&amp;Q,p-&gt;adjvex);</span><br><span class="line">                        p = p-&gt;next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n+e)。</p><p><strong>DFS与BFS相同方式的时间复杂度相同。</strong></p><p><strong>深度优化遍历更适合目标比较明确，以找到目标为主要目的的情况，广度优先遍历更适合在不断扩大遍历范围时找到相对最优解的情况。</strong></p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>图的基本概念</title>
      <link href="/2018/08/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2018/08/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>图：由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G(V,E)，其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>注意：</p><ul><li>线性表中数据元素称为元素，树中称为结点，图中称为顶点。</li><li>在图结构中，不允许没有顶点。</li><li>在图中，任意两个顶点间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的。</li></ul><h2 id="各种图的定义"><a href="#各种图的定义" class="headerlink" title="各种图的定义"></a>各种图的定义</h2><p>若顶点vi到vj之间的边没有方向，则称这条边为<strong>无向边</strong>，用无序偶对<strong>(vi,vj)</strong>来表示。如果图中任意两个顶点间的边都是无向边，则称该图为<strong>无向图</strong>。</p><p>若顶点vi到vj之间的边有方向，则称这条边为<strong>有向边</strong>，也称为<strong>弧</strong>，用有序偶对&lt;vi,vj&gt; 来表示，其中vi称为弧尾，vj称为弧头。如果图中任意两个顶点间的边都是有向边，则称该图为<strong>有向图</strong>。</p><p><strong>简单图</strong>：不存在顶点到其自身的边，且同一条边不重复出现。</p><p><strong>无向完全图</strong>：任意两个顶点之间都存在边。含有n个顶点的无向完全图有n(n-1)/2条边。</p><p><strong>有向完全图</strong>：任意两个顶点之间都存在方向互为相反的弧。含有n个顶点的有向完全图有n*(n-1)条边。</p><p>对于有n个顶点e条边的图，无向图0 &lt;= e &lt;= n(n-1)/2，有向图0 &lt;= e &lt;= n*(n-1)</p><p>有很少条边或弧的图称为<strong>稀疏图</strong>，反之称为<strong>稠密图</strong>。(相对概念)</p><p>有些图的边或弧具有与它相关的数字，这种与图的边或弧相关的数叫做<strong>权</strong>。这种带权的图通常称为<strong>网</strong>。</p><p>假设有两个图G1 = (V1,{E1})，G2 = (V2,{E2})，如果V2属于V1，E2属于E1，则称G2为G1的<strong>子图</strong>。</p><h2 id="图的顶点与边间的关系"><a href="#图的顶点与边间的关系" class="headerlink" title="图的顶点与边间的关系"></a>图的顶点与边间的关系</h2><p>对于无向图G = (V,{E}),如果边(v,v′) ∈E，则称顶点v和v′互为<strong>领接点</strong>，即v与v′<strong>相邻接</strong>。边(v,v′)<strong>依附</strong>于顶点v和v′，或者说(v,v′)与顶点v和v′<strong>相关联</strong>。顶点v的<strong>度</strong>是相关联的边的数目，记为<strong>TD(v)</strong>。</p><p><strong>边数即为各顶点度数和的一半。</strong></p><p>对于有向图G = (V,{E}),如果弧&lt;v,v′&gt;∈E,则称顶点v<strong>邻接到</strong>顶点v′，顶点v′<strong>邻接自</strong>顶点v。弧&lt;v,v′&gt;和顶点v，v′<strong>相关联</strong>。以顶点v为头的弧的数目称为v的<strong>入度</strong>，记为<strong>ID(v)</strong>，顶点v为尾的弧的数目称为v的<strong>出度</strong>，记为<strong>OD(v)</strong>。</p><p><strong>TD(v) = ID(v) + OD(v)</strong></p><p>路径的长度是路径上的边或弧的数目。</p><p>第一个顶点和最后一个顶点相同的路径称为<strong>回路</strong>或<strong>环</strong>。序列中顶点不重复出现的路径称为<strong>简单路径</strong>。除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路，称为<strong>简单回路</strong>或<strong>简单环</strong>。</p><h2 id="连通图相关术语"><a href="#连通图相关术语" class="headerlink" title="连通图相关术语"></a>连通图相关术语</h2><p>在无向图中，如果从顶点v到顶点v′有路径，则称v和v′是连通的。如果对于图中任意两个顶点vi，vj∈E，vi和vj都是连通的，则称G是<strong>连通图</strong>。(不一定闭合)</p><p>无向图中极大连通子图称为<strong>连通分量</strong>。注意：</p><ul><li>要是子图</li><li>子图要是连通的</li><li>连通子图含有极大顶点数</li><li>具有极大顶点数的连通子图包含依附于这些顶点的所有边</li></ul><p>在有向图中，如果对于每一对vi、vj∈V，vi≠vj，从vi到vj和从vj到vi都存在路径，则称G为<strong>强连通图</strong>。有向图中的极大连通子图称做有向图的<strong>强连通分量</strong>。</p><p>连通图的<strong>生成树</strong>：一个极小的连通子图，它含有图中全部n个顶点，但只有足以构成一棵树的n-1条边。</p><p><strong>如果一个图有n个顶点和小于n-1条边，则是非连通图，如果它多余n-1条边，必定构成一个环，因为这条边使得它依附的那两个顶点之间有了第二条路径。有n-1条边并不一定是生成树。</strong></p><p>如果一个有向图恰有一个顶点的入度为0，其余顶点入度均为1，则是一棵<strong>有向树</strong>。</p><p>一个有向图的<strong>生成森林</strong>由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧。</p><h1 id="图的抽象数据类型"><a href="#图的抽象数据类型" class="headerlink" title="图的抽象数据类型"></a>图的抽象数据类型</h1><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/DCa73LkIhE.jpg?imageslim" alt="mark"></p><h1 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h1><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>用两个数组数组来表示图，一个一位数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息。</p><p>无向图的边数组是一个对称矩阵。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/k3K4cmj8l2.jpg?imageslim" alt="mark"></p><p><strong>第i行(列)的元素之和即为vi的度。</strong></p><p>有向图：</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/el4LF3L943.jpg?imageslim" alt="mark"></p><p><strong>第i行各数之和为vi的出度。</strong></p><p><strong>第i列各数之和为vi的入度。</strong></p><p>网图：</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/FbJ2Ak688D.jpg?imageslim" alt="mark"></p><h3 id="结构代码"><a href="#结构代码" class="headerlink" title="结构代码"></a>结构代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;<span class="comment">//顶点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;<span class="comment">//边上权值类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100<span class="comment">//最大顶点数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY 65535<span class="comment">//用65535来代表∞</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType vexs[MAXVEX];<span class="comment">//顶点表</span></span><br><span class="line">    EdgeType arc[MAXVEX][MAXVEX];<span class="comment">//邻接矩阵，可看作边表</span></span><br><span class="line">    <span class="keyword">int</span> numVertexes,numEdges;<span class="comment">//当前顶点数和边数</span></span><br><span class="line">&#125;MGraph;</span><br></pre></td></tr></table></figure><h3 id="创建邻接矩阵"><a href="#创建邻接矩阵" class="headerlink" title="创建邻接矩阵"></a>创建邻接矩阵</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMGraph</span> <span class="params">(MGraph *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入顶点数和边数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;G-&gt;numVertexes,&amp;G-&gt;numEdges);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G-&gt;numVertexes;i++)<span class="comment">//建立顶点表</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G-&gt;vexs[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G-&gt;numEdges;i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; G-&gt;numVertexes;j++)</span><br><span class="line">            G-&gt;arc[i][j] = INFINITY;<span class="comment">//邻接矩阵初始化</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>;k &lt; G-&gt;numEdges;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入边(vi,vj)上的下标i，下标j和权数w：\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d,%d,%d"</span>,&amp;i,&amp;j,&amp;w);</span><br><span class="line">        G-&gt;arc[i][j] = w;</span><br><span class="line">        G-&gt;arc[j][i] = G-&gt;arc[i][j];<span class="comment">//无向图矩阵对称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n+n²+e)</p><p><strong>对于边数相对顶点较少的图，邻接矩阵对存储空间比较浪费。</strong></p><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>数组与链表相结合的存储方法。</p><ul><li>顶点用一维数组存储，每个数据元素还存储指向第一个邻接点的指针。</li><li>每个顶点的所有邻接点构成一个线性表，用单链表存储。(有向图为出边表)</li></ul><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/g0L3Ji88mA.jpg?imageslim" alt="mark"></p><p>对于有向图还可以建立一个逆邻接表，即入边表：</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/af87laaAk4.jpg?imageslim" alt="mark"></p><p>对于带权值的网图，可以在边表结点中增加一个weight数据域：</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/CkG4LimhCa.jpg?imageslim" alt="mark"></p><h3 id="结构代码-1"><a href="#结构代码-1" class="headerlink" title="结构代码"></a>结构代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>//边表结点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;<span class="comment">//邻接点域，存储该顶点对应的下标</span></span><br><span class="line">    EdgeType weight;<span class="comment">//用于存储权值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span><span class="comment">//链域，指向下一个邻接点</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span>//邻接表结点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    EdgeNode *firstedge;</span><br><span class="line">&#125;VertexNode,AdjList[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    AdjList adjList;<span class="comment">//上机已证实可以这么用</span></span><br><span class="line">    <span class="keyword">int</span> numVertexes,numEdges;</span><br><span class="line">&#125;GraphAdjList;</span><br></pre></td></tr></table></figure><h3 id="创建邻接表"><a href="#创建邻接表" class="headerlink" title="创建邻接表"></a>创建邻接表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateALGraph</span> <span class="params">(GraphAdList *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    EdgeNode *e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入顶点数和边数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;G-&gt;numVertexes,&amp;G-&gt;numEdges);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G-&gt;numVertexes;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G-&gt;adjList[i].data);<span class="comment">//输入顶点信息</span></span><br><span class="line">        G-&gt;adjList[i].firstedge = <span class="literal">NULL</span>;<span class="comment">//将边表置为空表</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>;k &lt; G-&gt;numEdges;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入边(vi,vj)上的下标i，下标j和权数w：\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d,%d,%d"</span>,&amp;i,&amp;j,&amp;w);</span><br><span class="line">        e = (EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">        e-&gt;adjvex = j;</span><br><span class="line">        e-&gt;weight = w;</span><br><span class="line">        e-&gt;next = G-&gt;adjList[i].firstedge;</span><br><span class="line">        G-&gt;adjList[i].firstEdge = e;</span><br><span class="line">        </span><br><span class="line">        e = (EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">        e-&gt;adjvex = i;</span><br><span class="line">        e-&gt;weight = w;</span><br><span class="line">        e-&gt;next = G-&gt;adjList[j].firstedge;</span><br><span class="line">        G-&gt;adjList[j].firstEdge = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n+e)</p><h2 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h2><p>将邻接表与逆邻接表结合。优化有向图的邻接表。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/jck68aaiI1.jpg" alt="mark"></p><p>tailvex：弧起点在顶点表的下标。</p><p>headvex：弧终点在顶点表的下标。</p><p>headlink：入边表指针域，指向终点相同的下一条边。(竖着指)</p><p>taillink：出边表指针域，指向起点相同的下一条边。(与邻接表相同)</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/63mk6be3KI.jpg" alt="mark"></p><p>十字链表的好处是把邻接表和逆邻接表整合到了一起，既容易找到以vi为尾的弧，也容易找到以vi为头的弧，因而容易求得顶点的入度和出度。</p><p>除了结构复杂了一点外，其实创建图算法的时间复杂度和邻接表相同。</p><h2 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h2><p>优化无向图的邻接表。使之易于对边操作。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/5ae32fg87m.jpg?imageslim" alt="mark"></p><p>ilink：指向依附顶点ivex的下一条边。</p><p>jlink：指向依附顶点jvex的下一条边。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/2c46KcfGid.jpg?imageslim" alt="mark"></p><p>ilink和jlink指向的位置一定要与其本身依附的顶点的值相同。</p><p><strong>邻接多重表与邻接表的区别，仅仅在于同一条边在邻接表中用两个结点表示，而在邻接多重表中只有一个结点。如果要删除(v0,v2)这条边，只需将右图中⑥⑨的链接指向改为^即可。</strong></p><h2 id="边集数组"><a href="#边集数组" class="headerlink" title="边集数组"></a>边集数组</h2><p>两个一维数组组成，一个存储顶点信息，一个存储边的信息，这个边数组每个元素由一条边的起点下标、终点下标和权值组成。</p><p><strong>它更适合对边依次进行操作，而非对顶点进行操作。</strong></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180802/8Kk36D21hG.jpg?imageslim" alt="mark"></p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>树（三）</title>
      <link href="/2018/07/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%91%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/07/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%91%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h1><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>给没有左孩子的结点的左指针域赋值指向该结点前驱的指针，给没有右孩子的结点的右指针域赋值指向该结点后继的指针，这种指向前驱和后继的指针称为<strong>线索</strong>，相应的二叉树称为<strong>线索二叉树</strong>。</p><p>产生原因：想要知道某结点的前驱后继是谁时不用再次遍历，节约了时间；空指针域得以利用，节省了空间。</p><p><em>以下均为中序遍历</em></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/f6mgFdcCIa.jpg?imageslim" alt="mark"></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/3Lmc5kAHBe.jpg?imageslim" alt="mark"></p><p>线索二叉树相当于把一棵二叉树变成了一个双向链表。</p><p><strong>把对二叉树以某种次序遍历使其变为线索二叉树的过程称为线索化</strong></p><p>为了区分孩子指针和前驱后继指针，每个结点再增设两个标志域，只存放布尔型变量：</p><ul><li>ltag为0时指向该结点的左孩子，为1时指向该结点的前驱</li><li>rtag为0时指向该结点的右孩子，为1时指向该结点的后继</li></ul><h2 id="结构代码"><a href="#结构代码" class="headerlink" title="结构代码"></a>结构代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;Link,Thread&#125; PointerTag;</span><br><span class="line"><span class="comment">//Link==0表示指向左右孩子的指针，Thread==1表示指向前驱或后继的指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BitThrNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BitThrNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    PointerTag LTag;</span><br><span class="line">    PointerTag RTag;<span class="comment">//左右标志</span></span><br><span class="line">&#125;BiThrNode,*BiThrTree;</span><br></pre></td></tr></table></figure><p><strong>线索化的过程就是在遍历过程中修改空指针的过程。</strong></p><h2 id="中序遍历线索化代码"><a href="#中序遍历线索化代码" class="headerlink" title="中序遍历线索化代码"></a>中序遍历线索化代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BiThrTree pre;<span class="comment">//全局变量，始终指向刚刚访问过的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span> <span class="params">(BiTheTree p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        InThreading (p-&gt;lchild);<span class="comment">//递归左子树线索化</span></span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;lchild)<span class="comment">//没有左孩子</span></span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;ltag = Thread;<span class="comment">//前驱线索</span></span><br><span class="line">            p-&gt;lchild = pre;<span class="comment">//左孩子指向前驱</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!pre-&gt;rchild)<span class="comment">//前驱没有右孩子</span></span><br><span class="line">        &#123;</span><br><span class="line">            pre-&gt;rtag = Thread;<span class="comment">//后继线索</span></span><br><span class="line">            pre-&gt;rchild = p;<span class="comment">//前驱的右孩子指针指向后继(p)</span></span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;<span class="comment">//保持pre指向p的前驱</span></span><br><span class="line">        InThreading (p-&gt;rchild);<span class="comment">//递归右子树线索化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以加一个头结点，lchild指针域的指针指向二叉树的根结点；rchild指针域的指针指向中序遍历时访问的最后一个结点；二叉树中序遍历第一个结点的lchild指针域的指针和最后一个结点的rchild指针域的指针均指向头结点。<strong>这样定义的好处是既可以从第一个结点开始向后遍历，又可以从最后一个结点开始向前遍历(相当于循环链表)</strong></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/0fl4dKmhH9.jpg?imageslim" alt="mark"></p><p><strong>疑问：前驱和后继指针在度为2的结点处不连续，走不通</strong></p><p><strong>回答：假设某个结点度为2，它的左子树通过后继指针走到尽头后即访问该结点，疑问在于此时此刻没有后继指针了无法继续向后，实际上无论如何下一步都会进入该结点的右子树，故下一步找到其右子树进行中序遍历的第一个结点即可，具体见下代码：</strong></p><h2 id="遍历带有头结点的线索二叉树代码"><a href="#遍历带有头结点的线索二叉树代码" class="headerlink" title="遍历带有头结点的线索二叉树代码"></a>遍历带有头结点的线索二叉树代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//T指向头结点，中序遍历二叉线索链表表示二叉树T</span></span><br><span class="line"><span class="function">Status <span class="title">InOrderTraverse_Thr</span> <span class="params">(BiThrTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiThrTree p;</span><br><span class="line">    p = T-&gt;lchild;<span class="comment">//p指向根结点</span></span><br><span class="line">    <span class="keyword">while</span> (p != T)<span class="comment">//空树或遍历结束时，p == T</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;LTag == Link)</span><br><span class="line">            <span class="comment">//当LTag=0时循环到中序序列的第一个结点</span></span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);<span class="comment">//也可以是其他操作</span></span><br><span class="line">        <span class="keyword">while</span> (p-&gt;RTag == Thread &amp;&amp; p-&gt;rchild != T)</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;rchild;<span class="comment">//当结点存在右子树时进入右子树根</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果所用的二叉树需要经常遍历或查找结点时需要某种遍历序列中的前驱或后继，则采用线索二叉链表的存储结构是一种不错的选择。</strong></p><h1 id="树、二叉树、森林的转换"><a href="#树、二叉树、森林的转换" class="headerlink" title="树、二叉树、森林的转换"></a>树、二叉树、森林的转换</h1><h2 id="树转化为二叉树"><a href="#树转化为二叉树" class="headerlink" title="树转化为二叉树"></a>树转化为二叉树</h2><ul><li>加线。在所有兄弟结点间加一条连线。</li><li>去线。对树中每个结点，只保留它与第一个孩子结点的连线，删除它与其他孩子结点之间的连线。</li><li>层次调整。<strong>注意第一个孩子是二叉树结点的左孩子，兄弟转换过来是结点的右孩子</strong></li></ul><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/iIHd2g1I7k.jpg?imageslim" alt="mark"></p><h2 id="森林转换为二叉树"><a href="#森林转换为二叉树" class="headerlink" title="森林转换为二叉树"></a>森林转换为二叉树</h2><ul><li>把每个树转换为二叉树。</li><li>第一棵树不动，从第二棵树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子，用线连接起来。当所有二叉树连接起来后就得到了由森林转换来的二叉树。<strong>(从最后一棵开始依次来)</strong></li></ul><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/k4klCfc6ac.jpg?imageslim" alt="mark"></p><h2 id="二叉树转换为树"><a href="#二叉树转换为树" class="headerlink" title="二叉树转换为树"></a>二叉树转换为树</h2><ul><li>加线。若某结点的左孩子结点存在，则将左孩子的n个右孩子都作为此结点的孩子，用线连接起来。</li><li>去线。删除原二叉树中所有结点与其右孩子结点的连线。</li><li>层次调整。</li></ul><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/GligjAjAEh.jpg?imageslim" alt="mark"></p><h2 id="二叉树转换为森林"><a href="#二叉树转换为森林" class="headerlink" title="二叉树转换为森林"></a>二叉树转换为森林</h2><p><strong>判断一棵二叉树能转换成一棵树还是森林，只要看这棵二叉树的根结点有没有右孩子，有就是森林，没有就是一棵树。</strong></p><ul><li>从根结点开始，若右孩子存在，则把右孩子结点的连线删除，再查，直到所有右孩子连线都删除为止，得到分离的二叉树。</li><li>将每棵二叉树转换为树即可。</li></ul><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/36BIEimBfl.jpg?imageslim" alt="mark"></p><h2 id="树与森林的遍历"><a href="#树与森林的遍历" class="headerlink" title="树与森林的遍历"></a>树与森林的遍历</h2><p>树的遍历：</p><p>方法一：先根遍历树，即先访问树的根结点，再依次先根遍历根的每棵子树。</p><p>方法二：后根遍历，即先依次后根遍历每棵子树，再访问根结点。</p><p>森林的遍历：</p><p>前序遍历：先访问森林中第一棵树的根结点，再依次先根遍历根的每棵子树，再依同样的方式遍历除第一棵树的剩余树构成的森林。</p><p>后序遍历：先访问森林中第一棵树，后根遍历的方式遍历每棵子树，再访问根结点，再依同样的方式遍历除第一棵树的剩余树构成的森林。</p><p><strong>树和森林的前序遍历和二叉树的前序遍历结果相同，树和森林的后序遍历和二叉树的中序遍历结果相同。</strong></p><p><strong>当以二叉链表作树的存储结构时，树的先根遍历和后根遍历完全可以借用二叉树的前序遍历和中序遍历的算法来实现。</strong></p><h1 id="赫夫曼树及其应用"><a href="#赫夫曼树及其应用" class="headerlink" title="赫夫曼树及其应用"></a>赫夫曼树及其应用</h1><p>从树中的一个结点到另一个结点之间的分支构成两个结点之间的路径，路径上的分支数目称为<strong>路径长度</strong>。</p><p><strong>树的路径长度</strong>就是从树根到每一个结点的路径长度之和。</p><p>如果考虑带权的结点，结点的带权路径长度为从该结点到树根之间的路径长度与结点上权的乘积。</p><p>树的带权的路径长度为树中<strong>所有叶子结点</strong>的带权路径长度之和。</p><p><strong>赫夫曼树：带权路径长度WPL最小的二叉树。</strong></p><p>求法：<img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/k9fa1ij8cI.jpg?imageslim" alt="mark"></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/5409fcF5mB.jpg?imageslim" alt="mark"></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/lm97lBlAI2.jpg?imageslim" alt="mark"></p><p>归纳：</p><ul><li>根据给定的n个权值{w1,w2,…,wn}构成n棵二叉树的集合F = {T1,T2,…,Tn},其中每棵二叉树T1中只有一个带权为w1的根结点，其左右子树均为空。</li><li>在F中选取两棵根结点的权值最小的树作为左右子树构造一棵新的二叉树，且新的二叉树的结点的权值为其左右子树上根结点的权值之和。</li><li>在F中删除这两棵树，同时将新得到的二叉树加入F中。</li><li>重复2,3步骤，直到F只含一棵树为止，这棵树便是赫夫曼树。</li></ul><p>赫夫曼树创建目的是解决当年远距离通信(主要是电报)的数据传输的最优化问题。</p><p><em>详见大话数据结构P205</em></p><p>赫夫曼编码：一般地，设需要编码的字符集为{d1,d2,…,dn}，各个字符在电文中出现的次数或概率的集合为{w1,w2,…,wn},以d1,d2,…,dn作为叶子结点，以w1,w2,…,wn作为相应叶子结点的权值来构造一棵赫夫曼树。规定赫夫曼树的左分支代表0，右分支代表1，则从根结点到叶子结点所经过的路径分支组成的0和1的序列便为该结点对应字符的编码，这就是赫夫曼编码。</p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>树（二）--二叉树</title>
      <link href="/2018/07/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%91%EF%BC%88%E4%BA%8C%EF%BC%89--%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2018/07/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%91%EF%BC%88%E4%BA%8C%EF%BC%89--%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>二叉树的定义：二叉树是n(n &gt;= 0)个结点的有限集合，该集合或者为空集(空二叉树)，或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。</p><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>特点：</p><ul><li>每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。</li><li>左右子树是有顺序的，次序不能任意颠倒。</li><li>即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。</li></ul><p><em>三个结点的树有两种形态，三个结点的二叉树有五种形态</em></p><p>五种基本形态：</p><ul><li>空二叉树</li><li>只有一个根结点</li><li>根结点只有左子树</li><li>根结点只有右子树</li><li>根结点既有左子树又有右子树</li></ul><h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><h3 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h3><p>所有结点都只有左子树的树叫做左斜树，所有结点都只有右子树的树叫做右斜树，两者统称斜树。</p><p>每一层只有一个结点，结点的个数与二叉树深度相同。</p><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>所有分支结点都存在左右子树，且所有叶子结点都在同一层上的二叉树。</p><p>特点：</p><ul><li>叶子只能出现在最下层</li><li>非叶子结点的度一定为2</li><li>在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多</li></ul><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>对一棵具有n个结点的二叉树按层序编号，如果编号为i(1 &lt;= i &lt;= n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中的位置完全相同，则这棵二叉树称为完全二叉树。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180730/GHgbg9D5C6.jpg?imageslim" alt="mark"></p><p><strong>满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树。</strong></p><p>特点：</p><ul><li>叶子结点只能出现在最下两层</li><li>最下层的叶子一定集中在左部连续位置</li><li>倒数第二层若有叶子结点，则一定都在右部连续位置</li><li>如果结点度为1，则该结点只有左孩子，即不存在只有右子树的情况</li><li>同样结点数的二叉树，完全二叉树深度最小</li></ul><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><ul><li><p>在二叉树的第i层上至多有2^(i-1)个结点(i &gt;= 1)</p></li><li><p>深度为k的二叉树至多有2^k - 1 个结点(k &gt;= 1)</p></li><li><p>对任意一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0 = n2 + 1</p><p>原因：分支总数 = 结点总数 - 1</p><p>​             n1 + 2*n2 = n0 + n1 + n2 -1</p><p>​       故n0 = n2 + 1</p></li><li><p>具有n个结点的完全二叉树的深度为[log₂n]+1([x]表示不大于x的最大整数)</p></li><li><p>如果对一棵有n个结点的完全二叉树(其深度为[log₂n]+1)的结点按层序编号，对任一结点i (i &lt;= i &lt;= n)有：</p><ul><li>如果i = 1，则结点i是二叉树的根，无双亲；如果i &gt; 1，则其双亲是结点[i/2]</li><li>如果2i &gt; n，则i无左孩子(结点i为叶子结点)；否则其左孩子是结点2i</li><li>如果2i+1 &gt; n，则i无右孩子；否则其左孩子是结点2i+1</li></ul></li></ul><p><strong>若一个偶数结点下一位奇数结点存在，则该奇数结点为该偶数结点的右兄弟</strong></p><h1 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h1><h2 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h2><p>对于一般二叉树，尽管层次编号不能反映逻辑关系，但可以将其按完全二叉树编号，把不存在的结点设置为”^”，依次存入数组中。</p><p>极端情况下，右斜树将造成存储空间极大浪费。(k个结点要分配2^k - 1个存储单元空间)</p><p><strong>顺序存储结构一般只用于完全二叉树</strong></p><h2 id="二叉链表"><a href="#二叉链表" class="headerlink" title="二叉链表"></a>二叉链表</h2><p>二叉树每个结点设计为一个数据域和两个指针域。</p><p>结构代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure><p>也可以增加一个指向双亲的指针构成三叉链表。</p><h1 id="求二叉树高度"><a href="#求二叉树高度" class="headerlink" title="求二叉树高度"></a>求二叉树高度</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PostOrderGetHeight</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> HL,HR,MaxH;</span><br><span class="line">      <span class="keyword">if</span>(T)</span><br><span class="line">      &#123;</span><br><span class="line">          HL = PostOrderGetHeight(BT-&gt;Left);<span class="comment">//求左子树的深度</span></span><br><span class="line">          HR = PostOrderGetHeight(BT-&gt;Right);<span class="comment">//求右子树的深度</span></span><br><span class="line">          MaxH =（HL &gt; HR）? HL : HR;<span class="comment">//取左右子树较大的深度</span></span><br><span class="line">          </span><br><span class="line">          <span class="keyword">return</span> (MaxH+<span class="number">1</span>);<span class="comment">//返回树的深度</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//空树深度为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                                                                                                                         ~~via文盲</p><h1 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h1><p>二叉树的遍历是指<strong>从根结点出发</strong>，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。<strong>(从根结点出发并不意味着先访问根结点)</strong></p><h2 id="前序遍历-先访问根结点"><a href="#前序遍历-先访问根结点" class="headerlink" title="前序遍历(先访问根结点)"></a>前序遍历(先访问根结点)</h2><p>若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。<strong>ABDGHCEIF</strong></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/cB6A0c6HLm.jpg?imageslim" alt="mark"></p><p>结构代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span> <span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,T-&gt;data);<span class="comment">//可以改为其他对结点的操作</span></span><br><span class="line">    PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">    PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历-中间访问根结点"><a href="#中序遍历-中间访问根结点" class="headerlink" title="中序遍历(中间访问根结点)"></a>中序遍历(中间访问根结点)</h2><p>若树为空，则空操作返回，否则从根结点开始，中序遍历根结点的左子树，然后访问根结点，最后中序遍历右子树。<strong>GDHBAEICF</strong></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/Am62cGFili.jpg?imageslim" alt="mark"></p><p>结构代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span> <span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    InOrderTraverse(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,T-&gt;data);<span class="comment">//可以改为其他对结点的操作</span></span><br><span class="line">    InOrderTraverse(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归表示法(使用堆栈)~~via文盲：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span> <span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S = CreatStack(MaxSize);<span class="comment">//创建并初始化堆栈     </span></span><br><span class="line">    <span class="keyword">while</span> （T || !IsEmpty(S)）</span><br><span class="line">    &#123;            </span><br><span class="line">        <span class="keyword">while</span> (T)</span><br><span class="line">        &#123;                 </span><br><span class="line">            Push(S,T);<span class="comment">//压栈                 </span></span><br><span class="line">            T = T-&gt;Left;<span class="comment">//从树左边开始            </span></span><br><span class="line">        &#125;            </span><br><span class="line">        <span class="keyword">if</span>  (!IsEmpty(S))</span><br><span class="line">        &#123;                  </span><br><span class="line">            T = Pop(S);<span class="comment">//结点弹出堆栈                 </span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,T-&gt;Data);<span class="comment">//输出结点         </span></span><br><span class="line">            T = T-&gt;Right;<span class="comment">//转向右子树           </span></span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历-最后访问根结点"><a href="#后序遍历-最后访问根结点" class="headerlink" title="后序遍历(最后访问根结点)"></a>后序遍历(最后访问根结点)</h2><p>若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后访问根结点。<strong>GHDBIEFCA</strong></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/4j6cb0JlBF.jpg?imageslim" alt="mark"></p><p>结构代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span> <span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PostOrderTraverse(T-&gt;lchild);</span><br><span class="line">    PostOrderTraverse(T-&gt;rchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,T-&gt;data);<span class="comment">//可以改为其他对结点的操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。<strong>ABCDEFGHI</strong></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/49L4c13KFk.jpg?imageslim" alt="mark"></p><p>使用队列实现~~via文盲：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      Queue Q;<span class="comment">//创建队列</span></span><br><span class="line">      <span class="keyword">if</span>(!T)</span><br><span class="line">          <span class="keyword">return</span>;<span class="comment">//是空树则直接返回</span></span><br><span class="line">      AddQ(Q,T);</span><br><span class="line">      <span class="keyword">while</span>(!IsEmptyQ(Q))</span><br><span class="line">      &#123;<span class="comment">//循环，直至队列为空</span></span><br><span class="line">            T = DelateQ(Q);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,T-&gt;Data);<span class="comment">//访问取出队列的结点  </span></span><br><span class="line">            <span class="keyword">if</span>(T-&gt;Left)</span><br><span class="line">                AddQ(Q,T-&gt;Left);</span><br><span class="line">            <span class="keyword">if</span>(T-&gt;Right)</span><br><span class="line">                AddQ(Q,T-&gt;Right);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二元运算表达树及其遍历"><a href="#二元运算表达树及其遍历" class="headerlink" title="二元运算表达树及其遍历"></a>二元运算表达树及其遍历</h2><p>三种遍历得到不同的访问结果：</p><ul><li><p>先序遍历得到前缀表达式。</p></li><li><p>中序遍历得到中缀表达式：但是中缀表达式可能由于优先级不同，出现问题。</p><p>—- 如何解决？输出左子树之前加左括号，输出右子树之后加右括号。</p></li><li><p>后序遍历得到后缀表达式。</p></li></ul><p>​                                                                                                                         ~~via文盲</p><p>计算机只会处理线性序列，这些遍历方法其实都是在把树中的结点变成某种有意义的线性序列，给程序的实现带来好处。</p><p><strong>已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树</strong>。</p><p><strong>已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树。</strong></p><p><strong>已知前序遍历序列和后序遍历序列，不能确定一棵二叉树。</strong></p><h1 id="二叉树的建立"><a href="#二叉树的建立" class="headerlink" title="二叉树的建立"></a>二叉树的建立</h1><p><strong>扩展二叉树</strong>：将二叉树每个结点的空指针引出一个虚结点，其值为一个特定值(如#)，这种处理后的二叉树为原二叉树的扩展二叉树。</p><p>扩展二叉树可以做到一个遍历序列确定一棵二叉树。(确定某一个结点有几个孩子，是否为叶子结点等)</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180731/GmA3Ccmb8i.jpg?imageslim" alt="mark"></p><p>假设用前序遍历生成一个结点均为字符的二叉树：</p><p>用键盘输入：AB#D##C##</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按前序输入二叉树中结点的值(一个字符)</span></span><br><span class="line"><span class="comment">//#表示空树，构造二叉链表表示二叉树T</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span> <span class="params">(BiTree *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TElemType ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'#'</span>)</span><br><span class="line">        *T = <span class="literal">NULL</span>;<span class="comment">//空结点</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        <span class="keyword">if</span> (!*T)</span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);<span class="comment">//内存已炸</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *T-&gt;data = ch;<span class="comment">//生成根结点</span></span><br><span class="line">            CreateBiTree (&amp;(*T)-&gt;rchild);<span class="comment">//构造左子树</span></span><br><span class="line">            CreateBiTree (&amp;(*T)-&gt;lchild);<span class="comment">//构造右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>树（一）</title>
      <link href="/2018/07/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/07/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>树：n(n &gt;= 0)个结点的有限集。n = 0时为空树。在任意一棵非空树中：</p><ul><li>有且仅有一个特定的称之为根的结点。</li><li>当n &gt; 1时，其余结点可分为m(m &gt; 0)个互不相交的有限集T1、T2、…、Tm，其中每一个集合本身又是一棵树，并且称为根的子树。</li></ul><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>对树的定义还需强调两点：</p><ul><li>n &gt; 0时根结点是唯一的，不可能存在多个根结点。</li><li>m &gt; 0时，子树的个数没有限制，但他们一定是互不相交的。</li></ul><h2 id="结点分类"><a href="#结点分类" class="headerlink" title="结点分类"></a>结点分类</h2><p>结点拥有的子树数称为<strong>结点的度</strong>。</p><p>度为0的结点称为<strong>叶子结点</strong>或<strong>终端结点</strong>。</p><p>度不为0的结点称为<strong>分支结点</strong>。(除根结点外，分支结点也称为<strong>内部结点</strong>)</p><p><strong>树的度</strong>是树内各结点的度的最大值。</p><h2 id="结点间的关系"><a href="#结点间的关系" class="headerlink" title="结点间的关系"></a>结点间的关系</h2><p>结点的子树的根称为该结点的<strong>孩子</strong>。该结点称为孩子的<strong>双亲</strong>。</p><p>同一双亲的孩子间互称<strong>兄弟</strong>。</p><p>结点的<strong>祖先</strong>是从根到该结点所经过分支上的所有结点。</p><p>以某结点为根的子树中的任一结点都称为该结点的<strong>子孙</strong>。</p><p>其双亲在同一层的结点互为<strong>堂兄弟</strong>。</p><h2 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h2><p><strong>结点的层次</strong>从根开始定义起，根为第一层，根的孩子在第二层。</p><p>树中结点的最大层次称为<strong>树的深度或高度</strong>。</p><p>如果将树中结点的各子树看成从左到右是有次序的，不能互换的，则称该树为<strong>有序树</strong>，否则称为<strong>无序树</strong>。</p><p><strong>森林</strong>是m(m &gt;= 0)棵互不相交的树的集合。对树中每个结点而言，其子树的集合即为森林。</p><h1 id="树的抽象数据类型"><a href="#树的抽象数据类型" class="headerlink" title="树的抽象数据类型"></a>树的抽象数据类型</h1><p><em>打星号内容为发博客时存有疑惑</em></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180730/Bg6faIfai5.jpg?imageslim" alt="mark"></p><h1 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h1><h2 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h2><p>假设一组连续空间存储树的结点。同时在每个结点中，附设一个指示器指示其双亲结点到链表中的位置。</p><p>结构代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TREE_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> TElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//结点数据</span></span><br><span class="line">    <span class="keyword">int</span> parent;<span class="comment">//双亲位置</span></span><br><span class="line">&#125;PTNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PTNode nodes[MAX_TREE_SIZE];<span class="comment">//结点数组</span></span><br><span class="line">    <span class="keyword">int</span> r,n;<span class="comment">//根的位置和结点数</span></span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure><p>我们约定根结点的双亲位置为-1。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180730/lJhLgc7DFb.jpg?imageslim" alt="mark"></p><p>可以扩展出长子域或右兄弟域，存储结构的设计非常灵活。</p><h2 id="多重链表表示法"><a href="#多重链表表示法" class="headerlink" title="多重链表表示法"></a>多重链表表示法</h2><p>每个结点有多个指针域，每个指针指向一棵子树的根结点。</p><p>方法一：</p><p>​    指针域的个数等于树的度。</p><p>​    当树中各结点的度相差很大时浪费空间。</p><p>方法二：</p><p>​    每个结点指针域的个数等于该结点的度，专门取一个位置来存储结点指针域的个数。</p><p>​    空间利用率高，但各个结点结构不同加上要维护结点的度的数值，运算时间上有损耗。</p><h2 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h2><p>把每个结点的孩子结点排列起来，以单链表为存储结构，则n个结点有n个孩子链表，如果是叶子结点则单链表为空。然后n个头指针又组成一个线性表，采用顺序存储结构存放进一个一位数组中。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180730/mFdAiJKC6m.jpg?imageslim" alt="mark"></p><p>结构代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TREE_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>//孩子结点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> child;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; *ChildPtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>//表头结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">    ChildPtr firstchild;</span><br><span class="line">&#125;CTBox;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>//树结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    CTBox nodes[MAX_TREE_SIZE]；</span><br><span class="line">    <span class="keyword">int</span> r,n;<span class="comment">//根的位置和结点数</span></span><br><span class="line">&#125;CTree;</span><br></pre></td></tr></table></figure><p>难以找到某个结点的双亲，可以改进至双亲孩子表示法:</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180730/0aD3Efdckh.jpg?imageslim" alt="mark"></p><h2 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h2><p>任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。因此，可以设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟。</p><p>结构代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>,*<span class="title">rightsib</span>;</span></span><br><span class="line">&#125;CSNode,*CSTree;</span><br></pre></td></tr></table></figure><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180730/i51lmgd5b4.jpg?imageslim" alt="mark"></p><p>同样难以找到双亲，也可以再加个parent指针。</p><p><strong>这个表示法最大的好处是把一棵复杂的树变成了一棵二叉树。</strong></p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>串/KMP模式匹配算法</title>
      <link href="/2018/07/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%B8%B2-KMP%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
      <url>/2018/07/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%B8%B2-KMP%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>队列</title>
      <link href="/2018/07/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/"/>
      <url>/2018/07/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>队列：只允许在一端进行插入操作，另一端进行删除操作的线性表。</p><a id="more"></a><p>队列是一种先入先出(First In First Out)的线性表，简称FIFO。</p><p>允许插入的一端称为队尾，允许删除的一端称为队头。</p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>栈的应用--逆波兰表示法</title>
      <link href="/2018/07/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
      <url>/2018/07/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>栈</title>
      <link href="/2018/07/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88/"/>
      <url>/2018/07/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88/</url>
      <content type="html"><![CDATA[<p>栈：限定仅在表尾进行插入和删除操作的线性表。</p><a id="more"></a><h1 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h1><p>允许插入和删除的一段称为栈顶，另一端称为栈底。</p><p>不含任何数据元素的栈称为空栈。</p><p>后入先出(Last In First Out)线性表，简称LIFO结构。</p><p>栈的插入操作，叫做进栈，也称压栈、入栈。</p><p>栈的删除操作，叫做出栈，也称弹栈。</p><p>3个元素1，2，3依次进栈，有5种可能的出栈次序：</p><ul><li>1、2、3进，再3、2、1出，次序为321</li><li>1进，1出，2进，2出，3进，3出，次序为123</li><li>1进，2进，2出，1出，3进，3出，次序为213</li><li>1进，1出，2进，3进，3出，2出，次序为132</li><li>1进，2进，2出，3进，3出，1出，次序为231</li></ul><p><strong>肯定不会出现312的情况，因为若3先出栈，则3必曾进过栈，则1、2已经进栈了，则2在1之上，不可能1先出栈</strong></p><h1 id="栈的抽象数据类型"><a href="#栈的抽象数据类型" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h1><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180729/kDKAIJF72k.jpg?imageslim" alt="mark"></p><h1 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h1><p>定义一个栈顶指针top来表示栈顶在数组中的位置</p><h2 id="结构代码"><a href="#结构代码" class="headerlink" title="结构代码"></a>结构代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h2 id="进栈操作"><a href="#进栈操作" class="headerlink" title="进栈操作"></a>进栈操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入元素e为新的栈顶元素</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span> <span class="params">(SqStack *S,SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;top == MAXSIZE<span class="number">-1</span>)<span class="comment">//是否栈满</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    S-&gt;top++;</span><br><span class="line">    S-&gt;data[S-&gt;top] = e;<span class="comment">//将新插入的指针赋值给栈顶空间</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若栈非空，则删除栈顶元素，用e返回其值</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span> <span class="params">(SqStack *S,SElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;top == <span class="number">-1</span>)<span class="comment">//空栈top值为-1</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    *e = S-&gt;data[S-&gt;top];</span><br><span class="line">    S-&gt;top--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度均为O(1)</strong></p><h1 id="两栈共享空间"><a href="#两栈共享空间" class="headerlink" title="两栈共享空间"></a>两栈共享空间</h1><p>一个栈的栈底为数组下标为0处，另一个的栈底为数组下标为n-1处</p><p>当两个指针间相差1时，即top1 + 1 = top2时为栈满(栈1满时，top1 = n-1,top2 = n;栈2满时，top1 = -1，top2 = 0)</p><h2 id="结构代码-1"><a href="#结构代码-1" class="headerlink" title="结构代码"></a>结构代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> top1;</span><br><span class="line">    <span class="keyword">int</span> top2;</span><br><span class="line">&#125;SqDoubleStack;</span><br></pre></td></tr></table></figure><h2 id="进栈操作-1"><a href="#进栈操作-1" class="headerlink" title="进栈操作"></a>进栈操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Push</span> <span class="params">(SqDoubleStack *S,SElemType e,<span class="keyword">int</span> stackNumber)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;top1+<span class="number">1</span> == S-&gt;top2)<span class="comment">//栈已满，不能再push新元素</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span> (stackNumber == <span class="number">1</span>)<span class="comment">//栈1有元素进栈</span></span><br><span class="line">        S-&gt;data[++S-&gt;top1] = e;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (stackNumber == <span class="number">2</span>)<span class="comment">//栈2有元素进栈</span></span><br><span class="line">        S-&gt;data[--S-&gt;top2] = e;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出栈操作-1"><a href="#出栈操作-1" class="headerlink" title="出栈操作"></a>出栈操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Pop</span> <span class="params">(SqDoubleStack *S,SElemType *e,<span class="keyword">int</span> stackNumber)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stackNumber == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (S-&gt;top1 == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> ERROR;<span class="comment">//栈1为空栈</span></span><br><span class="line">        *e = S-&gt;data[S-&gt;top1--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (stackNumber == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (S-&gt;top2 == n)</span><br><span class="line">            <span class="keyword">return</span> ERROR;<span class="comment">//栈2为空栈</span></span><br><span class="line">        *e = S-&gt;data[S-&gt;top2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通常当两个栈具有相同数据类型且空间需求有相反关系时使用这样的数据结构</strong></p><h1 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h1><p>通常将栈顶放在单链表的头部，头指针充当栈顶指针，不需要头结点。</p><h2 id="结构代码-2"><a href="#结构代码-2" class="headerlink" title="结构代码"></a>结构代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode,*LinkStackPtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LinkStackPtr top;</span><br><span class="line">    <span class="keyword">int</span> count;<span class="comment">//结点总数</span></span><br><span class="line">&#125;LinkStack;</span><br></pre></td></tr></table></figure><h2 id="进栈操作-2"><a href="#进栈操作-2" class="headerlink" title="进栈操作"></a>进栈操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Push</span> <span class="params">(Linkstack *S,SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkStackPtr s=(LinkStackPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">    </span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = S-&gt;top;</span><br><span class="line">    S-&gt;top = s;</span><br><span class="line">    S-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出栈操作-2"><a href="#出栈操作-2" class="headerlink" title="出栈操作"></a>出栈操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Pop</span> <span class="params">(LinkStack *S;SElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkStackPtr p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (StackEmpty(*S))</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    *e = S-&gt;top-&gt;data;</span><br><span class="line">    p=S-&gt;top;<span class="comment">//将栈顶结点赋值给p</span></span><br><span class="line">    S-&gt;top = S-&gt;top-&gt;next;<span class="comment">//栈顶指针下移一位</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    S-&gt;count--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果栈的使用过程中元素变化不可预料，那么最好用链栈，反之若变化在可控范围内，则最好用顺序栈</strong></p><p>栈的引入简化了程序设计问题，划分了不同层次，使思考范围缩小，更加聚焦于我们要解决的问题的核心。</p><p>栈的应用–递归：在前行阶段，对于每一层递归，函数的局部变量、参数值以及返回地址都被压入栈中；在退回阶段，位于栈顶的局部变量、参数、和返回地址被弹出，用于返回调用层次中执行代码的剩余部分，也就是恢复了调用状态。</p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>线性表</title>
      <link href="/2018/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2018/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>线性表：零个或多个数据元素的有限序列。</p><a id="more"></a><h1 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h1><p>若将线性表记为(A1,…,Ai,…,An),则表中Ai-1领先于Ai，Ai领先于Ai+1，称Ai-1是Ai的直接前驱元素，Ai+1是Ai的直接后继元素，当i = 1,2,…,n-1时，Ai有且仅有一个直接后继，当i = 2,3,…,n时，Ai有且仅有一个直接前驱。</p><p>线性表元素个数n(n &gt;= 0)定义为线性表的长度，当n = 0时，称为空表。</p><p>在较复杂的线性表中，一个数据元素可以由若干数据项组成。</p><h1 id="线性表的抽象数据类型"><a href="#线性表的抽象数据类型" class="headerlink" title="线性表的抽象数据类型"></a>线性表的抽象数据类型</h1><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180728/jae5AKa42l.jpg?imageslim" alt="mark"><img src="http://p63sxxlje.bkt.clouddn.com/blog/180728/AEaAD244dJ.jpg?imageslim" alt="mark"></p><p>上述操作都是基本操作，实际问题中涉及线性表的更复杂的操作可以由这些基本操作的组合来完成。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将所有在线性表Lb中但不在La中的数据元素插入到La中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(List *La,List Lb)</span></span></span><br><span class="line"><span class="function"><span class="comment">//List代指所有线性表，不是具体的一种结构</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> La_len,Lb_len;</span><br><span class="line">    ElemType *e;<span class="comment">//声明指向与La和Lb相同的数据元素e的指针</span></span><br><span class="line">    </span><br><span class="line">    La_len = ListLength(La)；</span><br><span class="line">    Lb_len = ListLength(Lb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= Lb_len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        GetELem(Lb,i,*e);<span class="comment">//取Lb中第i个元素赋值给e</span></span><br><span class="line">        <span class="keyword">if</span> (!LocateElem(La,*e))<span class="comment">//La中不存在和e相同的数据元素</span></span><br><span class="line">            ListInsert(La,++La_len,*e);<span class="comment">//插入到La的末尾</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//在一些指针方面对书上代码做了些改动，若有大佬发现问题欢迎提出</span></span><br></pre></td></tr></table></figure><h1 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h1><p>线性表的顺序存储结构：用一段地址连续的存储单元依次存储线性表的数据元素。</p><h2 id="结构代码"><a href="#结构代码" class="headerlink" title="结构代码"></a>结构代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType deta[MAXSIZE];<span class="comment">//数组存储数据元素，最大值为MAXSIZE</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//线性表当前长度</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><p>描述顺序存储结构三个属性：</p><ul><li>存储空间的起始位置：数组data的存储位置就是存储空间的存储位置</li><li>线性表的最大存储容量：数组长度MAXSIZE</li><li>线性表的当前长度：length</li></ul><p><strong>数组长度是存放线性表的存储空间的长度，线性表的长度是线性表中数据元素的个数(变化的)，在任意时刻，线性表的长度应小于等于数组长度</strong></p><p>假设每个数据元素占用c个存储单元，则线性表中第i+1个数据元素的存储位置和第i个元素的存储位置满足下列关系(LOC表示获得存储位置的函数)</p><p>​                                      <strong>LOC(Ai+1) = LOC(Ai) + c</strong></p><p>因此</p><p>​                                  <strong>LOC(Ai) = LOC(A1) + (i-1) * c</strong></p><p>通过这个公式可以随时算出线性表中任意位置的地址，对于计算机来说都是相等的时间，存储性能为O(1),我们把具有这一特点的存储结构称为随机存取结构。</p><h2 id="获得元素操作"><a href="#获得元素操作" class="headerlink" title="获得元素操作"></a>获得元素操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//函数的类型，其值是函数结果状态代码，如OK等</span></span><br><span class="line"><span class="comment">//初始条件：顺序线性表L已经存在，1 &lt;= i &lt;= ListLength(L)</span></span><br><span class="line"><span class="comment">//操作结果：用e返回L中第i个数据元素的值</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span> <span class="params">(SqList L,<span class="keyword">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length = <span class="number">0</span> || i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    *e = L.data[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入元素操作"><a href="#插入元素操作" class="headerlink" title="插入元素操作"></a>插入元素操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始条件：顺序线性表已经存在，1 &lt;= i &lt;= ListLength(L)</span></span><br><span class="line"><span class="comment">//操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span> <span class="params">(SqList *L,<span class="keyword">int</span> i,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length == MAXSIZE || i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= L-&gt;length)<span class="comment">//插入的位置不在表尾</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = L-&gt;length<span class="number">-1</span>;k &gt;= i<span class="number">-1</span>;k--)</span><br><span class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        <span class="comment">//将要插入位置之后的数据元素向后移动一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除元素操作"><a href="#删除元素操作" class="headerlink" title="删除元素操作"></a>删除元素操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始条件：顺序线性表已经存在，1 &lt;= i &lt;= ListLength(L)</span></span><br><span class="line"><span class="comment">//操作结果：删除L第i个数据元素，并用e返回其值，L的长度减1</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span> <span class="params">(SqList *L;<span class="keyword">int</span> i;ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length = <span class="number">0</span> || i &lt; <span class="number">1</span> || i &gt; L-&gt;length )</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    *e = L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span> (i &lt; L-&gt;length)<span class="comment">//删除的不是最后位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i;k &lt; L-&gt;length;k++)</span><br><span class="line">            L-&gt;data[k<span class="number">-1</span>] = L-&gt;data[k];</span><br><span class="line">        <span class="comment">//将删除位置后继元素前移</span></span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入或删除时平均时间复杂度为O(n)</p><h2 id="顺序存储结构的优缺点"><a href="#顺序存储结构的优缺点" class="headerlink" title="顺序存储结构的优缺点"></a>顺序存储结构的优缺点</h2><p>优点：</p><ul><li>无需为表示表中元素之间的逻辑关系而增加额外的存储空间</li><li>可以快速地存取表中任意位置的元素</li></ul><p>缺点：</p><ul><li>插入和删除操作需要移动大量元素</li><li>当线性表长度变化较大时，难以确定存储空间的容量</li><li>造成存储空间的”碎片”</li></ul><h1 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h1><p>存储数据元素信息的域称为数据域，存储直接后继元素位置的域称为指针域，指针域中存储的信息称作指针或链，这两部分组织数据元素Ai的存储映像，称作结点</p><p>单链表：每个结点中只包含一个指针域</p><p>头指针：链表第一个结点的存储位置(<strong>无论链表是否为空，头指针均不为空，是链表的必须元素。若链表有头结点，则是指向头结点的指针</strong>)</p><p>头结点：单链表第一个结点之前的结点，其指针域存储指向第一个结点的指针(实现了在第一个元素结点前插入结点和删除第一个结点的操作与其他结点操作的统一，<strong>不是链表的必须元素</strong>)</p><h2 id="结构代码-1"><a href="#结构代码-1" class="headerlink" title="结构代码"></a>结构代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LinkList</span>;</span></span><br></pre></td></tr></table></figure><p><em>以下代码均假定头结点存在。</em></p><h2 id="获取元素操作"><a href="#获取元素操作" class="headerlink" title="获取元素操作"></a>获取元素操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始条件：顺序线性表L已经存在，1 &lt;= i &lt;= ListLength(L)</span></span><br><span class="line"><span class="comment">//操作结果：用e返回L中第i个数据元素的值</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span> <span class="params">(SqList L,<span class="keyword">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    LinkList p;</span><br><span class="line">    </span><br><span class="line">    p = L-&gt;next;<span class="comment">//让p指向链表第一个结点(非头结点)</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i)<span class="comment">//p不为空或计数器j还没等于i时，循环继续</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i)</span><br><span class="line">        <span class="keyword">return</span> ERROR;<span class="comment">//第i个元素不存在</span></span><br><span class="line">    *e = p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始条件：顺序线性表已经存在，1 &lt;= i &lt;= ListLength(L)</span></span><br><span class="line"><span class="comment">//操作结果：在L中第i个结点之前插入新的数据元素e，L的长度加1</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span> <span class="params">(SqList *L,<span class="keyword">int</span> i,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p,s;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i<span class="number">-1</span>)<span class="comment">//寻找第i-1个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i)</span><br><span class="line">        <span class="keyword">return</span> ERROR;<span class="comment">//第i个元素不存在</span></span><br><span class="line">    s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;<span class="comment">//将p的后继结点赋值给s的后继</span></span><br><span class="line">    p-&gt;next = s;<span class="comment">//将s赋值给p的后继</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始条件：顺序线性表已经存在，1 &lt;= i &lt;= ListLength(L)</span></span><br><span class="line"><span class="comment">//操作结果：删除L第i个数据元素，并用e返回其值，L的长度减1</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span> <span class="params">(SqList *L;<span class="keyword">int</span> i;ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    LinkList p,q;</span><br><span class="line">    </span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i<span class="number">-1</span>)<span class="comment">//寻找第i-1个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i)</span><br><span class="line">        <span class="keyword">return</span> ERROR;<span class="comment">//第i个元素不存在</span></span><br><span class="line">    q = p-&gt;next;<span class="comment">//q指向第i个结点</span></span><br><span class="line">    p-&gt;next = q-&gt;next;<span class="comment">//将q的后继结点赋值给p的后继结点</span></span><br><span class="line">    *e = q-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的整表创建-头插法"><a href="#单链表的整表创建-头插法" class="headerlink" title="单链表的整表创建(头插法)"></a>单链表的整表创建(头插法)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//随机产生n个元素的值，建立带头结点的单链表L</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListHead</span><span class="params">(LinkList *L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    </span><br><span class="line">    srand(time(<span class="number">0</span>));<span class="comment">//初始化随机种子</span></span><br><span class="line">    *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    (*L)-&gt;next = <span class="literal">NULL</span>;<span class="comment">//建立一个带头结点的单链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">//生成新结点</span></span><br><span class="line">        p-&gt;data = rand()%<span class="number">100</span>+<span class="number">1</span>；<span class="comment">//随机生成100以内的数字</span></span><br><span class="line">        p-&gt;next = (*L)-&gt;next;</span><br><span class="line">        (*L)-&gt;next = p;<span class="comment">//插入到表头</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的整表创建-尾插法"><a href="#单链表的整表创建-尾插法" class="headerlink" title="单链表的整表创建(尾插法)"></a>单链表的整表创建(尾插法)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListHead</span><span class="params">(LinkList *L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p,r;</span><br><span class="line">    </span><br><span class="line">    srand(time(<span class="number">0</span>));<span class="comment">//初始化随机种子</span></span><br><span class="line">    *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    r = *L;<span class="comment">//r为指向尾部的结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        p-&gt;data = rand()%<span class="number">100</span>+<span class="number">1</span>；</span><br><span class="line">        r-&gt;next = p;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;<span class="comment">//表示当前链表结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的整表删除"><a href="#单链表的整表删除" class="headerlink" title="单链表的整表删除"></a>单链表的整表删除</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始条件：顺序线性表L已经存在</span></span><br><span class="line"><span class="comment">//操作结果：将L重置为空表</span></span><br><span class="line"><span class="function">Status <span class="title">ClearList</span> <span class="params">(LinkList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p,q;</span><br><span class="line">    </span><br><span class="line">    p = (*L)-&gt;next;<span class="comment">//p指向第一个结点</span></span><br><span class="line">    <span class="keyword">while</span> (p)<span class="comment">//没到表尾</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">      <span class="comment">/*书上代码：</span></span><br><span class="line"><span class="comment">        q = p-&gt;next;</span></span><br><span class="line"><span class="comment">        free(p);</span></span><br><span class="line"><span class="comment">        p = q;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    &#125;</span><br><span class="line">    (*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表结构与顺序存储结构的优缺点"><a href="#单链表结构与顺序存储结构的优缺点" class="headerlink" title="单链表结构与顺序存储结构的优缺点"></a>单链表结构与顺序存储结构的优缺点</h2><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180728/13KI3c4B1D.jpg?imageslim" alt="mark"></p><p><strong>结论：</strong></p><ul><li><strong>若线性表需要频繁查找，很少进行插入和删除操作时，宜采用顺序存储结构；若需要频繁插入与删除时，宜采用单链表结构。</strong></li><li><strong>当线性表中元素个数变化较大或根本不知道有多大时，最好采用单链表结构，而若事先知道线性表大致长度，则顺序存储结构效率高很多。</strong></li></ul><h1 id="其他链表"><a href="#其他链表" class="headerlink" title="其他链表"></a>其他链表</h1><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><p>用数组描述的链表(给没有指针的高级语言设计的一种实现单链表能力的方法)</p><p>优点：</p><ul><li>在插入和删除操作时，只需修改游标，不需要移动元素，从而改进了在顺序存储结构中插入和删除操作需要移动大量元素的缺点</li></ul><p>缺点：</p><ul><li>没有解决连续存储分配带来的表长难以确定的问题</li><li>失去了顺序存储结构随机存取的特性</li></ul><p>(具体代码日后没事再更，详情可见大话数据结构P71页)</p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>将单链表中终端结点的指针端由空结点改为头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。</p><p>循环链表解决了一个很麻烦的问题，即如何从当中一结点出发，访问到链表全部结点。</p><p>单链表中头指针访问第一个结点需要O(1)时间，访问最后一个结点需要O(n)时间</p><p>循环链表中若设置尾指针，则查找终端结点与开始结点的时间复杂度均为O(1)</p><p>用尾指针非常容易合并两个循环链表</p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>在单链表的每个结点中，再设置一个指向其前驱结点的指针域</p><p>结构代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span> *<span class="title">prior</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;DulNode, *DulLinkList;</span><br></pre></td></tr></table></figure><p><strong>p-&gt;next-&gt;prior = p = p-&gt;prior-&gt;next</strong></p><p>在p与p-&gt;next之间插入结点s：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">s-&gt;prior = p;</span><br><span class="line">p-&gt;next-&gt;prior = s;</span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure><p><strong>先搞定s的前驱和后继，再搞定后结点的前驱，最后解决前结点的后继</strong></p><p>删除结点p：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;prior-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>算法基础</title>
      <link href="/2018/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>算法：是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表现一个或多个操作。</p><a id="more"></a><h1 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h1><ul><li>输入输出：算法具有零个或多个输入，至少有一个或多个输出。</li><li>有穷性：指算法在执行有限的步骤后，自动结束而不会出现无限循环，并且每个步骤在可接受的时间内完成。（譬如运行二十年结束的算法就不可行）</li><li>确定性：算法的每一个步骤都具有确定的含义，不会出现二义性。（算法在一定条件下，只有一条执行路径，相同的输入只能有唯一输出的结果）</li><li>可行性：算法每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。（算法可以转换为程序上机运行，并能得到正确结果）</li></ul><h1 id="算法的设计要求"><a href="#算法的设计要求" class="headerlink" title="算法的设计要求"></a>算法的设计要求</h1><ul><li><p>正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能得到问题的正确答案。</p><p>四个层次：</p><p>1.算法程序没有语法错误。</p><p>2.算法程序对于合法的输入数据能够产生满足要求的输出结果。</p><p>3.算法程序对于非法的输入数据能够得到满足规格说明的结果。</p><p>4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p><p><strong>一般情况下把层次3作为一个算法是否成功的标准</strong></p><p>​</p></li><li><p>可读性：算法设计的另一目的是为了便于阅读、理解和交流。</p></li><li><p>健壮性：当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果</p></li><li><p>时间效率高和存储量低  （存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序所占用的内存或外部存储空间）</p></li></ul><h1 id="算法效率的度量方法"><a href="#算法效率的度量方法" class="headerlink" title="算法效率的度量方法"></a>算法效率的度量方法</h1><ul><li>事后分析法(不科学，不准确)</li><li>事前分析估算法</li></ul><p><strong>一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少</strong></p><h1 id="算法的时间复杂度：大O记法"><a href="#算法的时间复杂度：大O记法" class="headerlink" title="算法的时间复杂度：大O记法"></a>算法的时间复杂度：大O记法</h1><h2 id="推导大O阶"><a href="#推导大O阶" class="headerlink" title="推导大O阶"></a>推导大O阶</h2><ul><li>用常数1取代运行时间中的所有加法常数。</li><li>在修改后的运行次数函数中，只保留最高阶项。</li><li>如果最高阶存在且不是1，则去除与这个项相乘的常数。</li></ul><h2 id="常数阶-O-1"><a href="#常数阶-O-1" class="headerlink" title="常数阶 O(1)"></a>常数阶 O(1)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;       <span class="comment">//执行一次</span></span><br><span class="line">sun = (<span class="number">1</span>+n)*n/<span class="number">2</span>;   <span class="comment">//执行一次</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);  <span class="comment">//执行一次</span></span><br></pre></td></tr></table></figure><h2 id="线性阶-O-n"><a href="#线性阶-O-n" class="headerlink" title="线性阶 O(n)"></a>线性阶 O(n)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//时间复杂度为O(1)的序列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对数阶-O-logn"><a href="#对数阶-O-logn" class="headerlink" title="对数阶 O(logn)"></a>对数阶 O(logn)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">while</span> (count &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">    count = count * <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//时间复杂度为O(1)的序列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平方阶-O-n²"><a href="#平方阶-O-n²" class="headerlink" title="平方阶 O(n²)"></a>平方阶 O(n²)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//时间复杂度为O(1)的序列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = i;j &lt; n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//时间复杂度为O(1)的序列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  总执行次数 = n+(n-1)+(n-2)+...+1</span></span><br><span class="line"><span class="comment">            = (n+1)*n/2</span></span><br><span class="line"><span class="comment">            = n²/2 + n/2</span></span><br><span class="line"><span class="comment">  时间复杂度仍为O(n²)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j = count;j &lt; n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//时间复杂度为O(1)的序列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n++;                                 <span class="comment">//执行次数为1</span></span><br><span class="line">function(n);                         <span class="comment">//执行次数为n</span></span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)                 <span class="comment">//执行次数为n²</span></span><br><span class="line">&#123;</span><br><span class="line">    functon(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; n;i++)                <span class="comment">//执行次数为n*(n+1)/2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = i;j &lt; n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//时间复杂度为O(1)的序列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度仍为O(n²)</span></span><br></pre></td></tr></table></figure><h2 id="常见时间复杂度所消耗时间排序"><a href="#常见时间复杂度所消耗时间排序" class="headerlink" title="常见时间复杂度所消耗时间排序"></a>常见时间复杂度所消耗时间排序</h2><p><strong>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(n³) &lt; O(2ⁿ) &lt; O(n!) &lt; O(nⁿ)</strong></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>最坏运行时间是一种最重要的需求，除非特殊指定，一般提到的运行时间都是指最坏情况下的运行时间。</p><p>平均运行时间是所有情况中最有意义的，因为它是期望的运行时间。</p><p>若算法执行时所需的辅助空间相对于数据量而言是一个常数，则称此算法为原地工作，空间复杂度为O(1).</p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>数据结构基础</title>
      <link href="/2018/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>数据结构：一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关操作 的学科。<strong>是相互之间存在一种或多种关系的数据元素的集合。</strong></p><a id="more"></a><p><strong>程序设计 = 数据结构 + 算法</strong></p><p>数据：描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</p><ul><li>可以输入到计算机中</li><li>能被计算机程序处理</li></ul><p>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。</p><p><strong>数据元素是数据结构中建立数据模型的着眼点</strong></p><p>数据项：一个数据元素可以有若干数据项组成。</p><p><strong>数据项是数据不可分割的最小单位</strong></p><p>数据对象：性质相同的数据元素的集合，是数据的子集。</p><p>逻辑结构：数据对象中数据元素之间的相互关系。</p><ul><li>集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</li><li>线性结构：线性结构中的数据元素之间是一对一的关系。</li><li>树形结构：树形结构中的数据元素之间存在一种一对多的层次关系。</li><li>图形结构：图形结构的数据元素是多对多的关系。</li></ul><p>物理结构：是指数据的逻辑结构在计算机中的存储形式。</p><ul><li>顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。</li><li>链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li></ul><p>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p><ul><li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。</li><li>结构类型：由若干类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成。</li></ul><p>抽象数据类型：是指一个数学模型及定义在该模型上的一组操作。</p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180727/IeCD1il7dl.jpg?imageslim" alt="mark"></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180727/I78K7ADc0H.jpg?imageslim" alt="mark"></p><p>抽象数据类型的标准格式见上↑↑↑</p><p>总结：<img src="http://p63sxxlje.bkt.clouddn.com/blog/180727/eLjeAegb6B.jpg?imageslim" alt="mark"></p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>java读取txt文件</title>
      <link href="/2018/07/26/java/java%E5%BA%94%E7%94%A8/java%E8%AF%BB%E5%8F%96txt%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/26/java/java%E5%BA%94%E7%94%A8/java%E8%AF%BB%E5%8F%96txt%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>源码：</p><a id="more"></a><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180726/Hc42GK3d2I.png?imageslim" alt="mark"></p><p><img src="http://p63sxxlje.bkt.clouddn.com/blog/180726/IddGA7j5dc.png?imageslim" alt="mark"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXTParseUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer ONE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 读取数据 */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">   BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"111.txt"</span>)),</span><br><span class="line"></span><br><span class="line">                   <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">   String lineTxt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> ((lineTxt = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    String[] names = lineTxt.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (map.keySet().contains(name)) &#123;</span><br><span class="line"></span><br><span class="line">      map.put(name, (map.get(name) + ONE));</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      map.put(name, ONE);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   br.close();</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">   System.err.println(<span class="string">"read errors :"</span> + e);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 输出数据 */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">   BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"final.txt"</span>)),</span><br><span class="line"></span><br><span class="line">                   <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (String name : map.keySet()) &#123;</span><br><span class="line"></span><br><span class="line">    bw.write(name + <span class="string">" "</span> + map.get(name));</span><br><span class="line"></span><br><span class="line">    bw.newLine();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   bw.close();</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">   System.err.println(<span class="string">"write errors :"</span> + e);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试数据：</p><p>文苏洋,闫少翀,孟超<br>张育铭,王洪展<br>程浩男,路佳琦<br>罗天实,wsy,ysc,mc,zym<br>whz,ljq,lts<br>chn</p><p>运行结果：</p><p>闫少翀 1<br>罗天实 1<br>ysc 1<br>whz 1<br>chn 1<br>王洪展 1<br>lts 1<br>孟超 1<br>文苏洋 1<br>张育铭 1<br>程浩男 1<br>zym 1<br>ljq 1<br>mc 1<br>路佳琦 1<br>wsy 1</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
          <category> java应用 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/21/%E5%85%B6%E4%BB%96/hello-world/"/>
      <url>/2018/05/21/%E5%85%B6%E4%BB%96/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
